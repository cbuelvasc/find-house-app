{"version":3,"sources":["property.effects.ts"],"names":["rxjs_1","require","core_1","operators_1","effects_1","property_actions_1","PropertyEffects","actions$","propertiesService","store","_this","this","showPageLoadingDistpatcher","PropertiesPageToggleLoading","isLoading","showLoadingDistpatcher","hideActionLoadingDistpatcher","loadPropertiesPage$","pipe","ofType","PropertyActionTypes","PropertiesPageRequested","mergeMap","_a","payload","dispatch","requestToServer","findProperties","page","lastQuery","of","forkJoin","map","response","result","PropertiesPageLoaded","properties","items","totalCount","deleteproperty$","OnePropertyDeleted","deleteProperty","id","deleteProperties$","ManyPropertiesDeleted","deleteProperties","ids","updateProperty$","PropertyUpdated","updateProperty","property","createProperty$","PropertyOnServerCreated","createProperty","tap","res","PropertyCreated","__decorate","Effect","Injectable","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,QACAC,OAAAD,QAAA,iBACAE,YAAAF,QAAA,kBACAG,UAAAH,QAAA,iBAKAI,mBAAAJ,QAAA,gCAeAK,gBAAA,WA4FE,SAAAA,EAAoBC,EAA2BC,EAA8CC,GAA7F,IAAAC,EAAAC,KAAoBA,KAAAJ,SAAAA,EAA2BI,KAAAH,kBAAAA,EAA8CG,KAAAF,MAAAA,EA1F7FE,KAAAC,2BAA6B,IAAIP,mBAAAQ,4BAA4B,CAAEC,WAAW,IAC1EH,KAAAI,uBAAyB,IAAIV,mBAAAQ,4BAA4B,CAAEC,WAAW,IACtEH,KAAAK,6BAA+B,IAAIX,mBAAAQ,4BAA4B,CAAEC,WAAW,IAG5EH,KAAAM,oBAAwDN,KAAKJ,SAASW,KACpEd,UAAAe,OAAgCd,mBAAAe,oBAAoBC,yBACpDlB,YAAAmB,SAAS,SAACC,OAAEC,EAAAD,EAAAC,QACVd,EAAKD,MAAMgB,SAASf,EAAKE,4BACzB,IAAMc,EAAkBhB,EAAKF,kBAAkBmB,eAAeH,EAAQI,MAChEC,EAAY7B,OAAA8B,GAAGN,EAAQI,MAC7B,OAAO5B,OAAA+B,SAAS,CAACL,EAAiBG,MAEpC1B,YAAA6B,IAAI,SAAAC,GACF,IAAMC,EAA4BD,EAAS,GACrCJ,EAA8BI,EAAS,GAC7C,OAAO,IAAI5B,mBAAA8B,qBAAqB,CAC9BC,WAAYF,EAAOG,MACnBC,WAAYJ,EAAOI,WACnBV,KAAMC,OAMZlB,KAAA4B,gBAA2D5B,KAAKJ,SAASW,KACvEd,UAAAe,OAA2Bd,mBAAAe,oBAAoBoB,oBAC/CrC,YAAAmB,SAAS,SAACC,OAAEC,EAAAD,EAAAC,QAEV,OADAd,EAAKD,MAAMgB,SAASf,EAAKK,wBAClBL,EAAKF,kBAAkBiC,eAAejB,EAAQkB,MAGvDvC,YAAA6B,IAAI,WACF,OAAOtB,EAAKM,gCAKhBL,KAAAgC,kBAA6DhC,KAAKJ,SAASW,KACzEd,UAAAe,OAA8Bd,mBAAAe,oBAAoBwB,uBAClDzC,YAAAmB,SAAS,SAACC,OAAEC,EAAAD,EAAAC,QAEV,OADAd,EAAKD,MAAMgB,SAASf,EAAKK,wBAClBL,EAAKF,kBAAkBqC,iBAAiBrB,EAAQsB,OAGzD3C,YAAA6B,IAAI,WACF,OAAOtB,EAAKM,gCAiBhBL,KAAAoC,gBAA2DpC,KAAKJ,SAASW,KACvEd,UAAAe,OAAwBd,mBAAAe,oBAAoB4B,iBAC5C7C,YAAAmB,SAAS,SAACC,OAAEC,EAAAD,EAAAC,QAEV,OADAd,EAAKD,MAAMgB,SAASf,EAAKK,wBAClBL,EAAKF,kBAAkByC,eAAezB,EAAQ0B,YAEvD/C,YAAA6B,IAAI,WACF,OAAOtB,EAAKM,gCAKhBL,KAAAwC,gBAA2DxC,KAAKJ,SAASW,KACvEd,UAAAe,OAAgCd,mBAAAe,oBAAoBgC,yBACpDjD,YAAAmB,SAAS,SAACC,OAAEC,EAAAD,EAAAC,QAEV,OADAd,EAAKD,MAAMgB,SAASf,EAAKK,wBAClBL,EAAKF,kBAAkB6C,eAAe7B,EAAQ0B,UAAUhC,KAC7Df,YAAAmD,IAAI,SAAAC,GACF7C,EAAKD,MAAMgB,SAAS,IAAIpB,mBAAAmD,gBAAgB,CAAEN,SAAUK,UAI1DpD,YAAA6B,IAAI,WACF,OAAOtB,EAAKM,gCAMlB,OAvFEyC,WAAA,CADCrD,UAAAsD,6CAqBDD,WAAA,CADCrD,UAAAsD,yCAcDD,WAAA,CADCrD,UAAAsD,2CA0BDD,WAAA,CADCrD,UAAAsD,yCAaDD,WAAA,CADCrD,UAAAsD,yCA5EUpD,EAAemD,WAAA,CAD3BvD,OAAAyD,cACYrD,GAAb,GAAasD,QAAAtD,gBAAAA","file":"property.effects.min.js","sourcesContent":["import { forkJoin, Observable, of } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { mergeMap, map, tap } from 'rxjs/operators';\r\nimport { Effect, Actions, ofType } from '@ngrx/effects';\r\nimport { Store, Action } from '@ngrx/store';\r\n\r\nimport { PropertiesService } from '../_services/';\r\nimport { AppState } from '../../reducers';\r\nimport {\r\n  PropertyActionTypes,\r\n  PropertiesPageRequested,\r\n  PropertiesPageLoaded,\r\n  ManyPropertiesDeleted,\r\n  OnePropertyDeleted,\r\n  PropertiesPageToggleLoading,\r\n  PropertiesStatusUpdated,\r\n  PropertyUpdated,\r\n  PropertyCreated,\r\n  PropertyOnServerCreated\r\n} from '../_actions/property.actions';\r\nimport { QueryParamsModel, QueryResultsModel } from '../../_base/crud';\r\n\r\n@Injectable()\r\nexport class PropertyEffects {\r\n\r\n  showPageLoadingDistpatcher = new PropertiesPageToggleLoading({ isLoading: true });\r\n  showLoadingDistpatcher = new PropertiesPageToggleLoading({ isLoading: true });\r\n  hideActionLoadingDistpatcher = new PropertiesPageToggleLoading({ isLoading: false });\r\n\r\n  @Effect()\r\n  loadPropertiesPage$: Observable<PropertiesPageLoaded> = this.actions$.pipe(\r\n    ofType<PropertiesPageRequested>(PropertyActionTypes.PropertiesPageRequested),\r\n    mergeMap(({ payload }) => {\r\n      this.store.dispatch(this.showPageLoadingDistpatcher);\r\n      const requestToServer = this.propertiesService.findProperties(payload.page);\r\n      const lastQuery = of(payload.page);\r\n      return forkJoin([requestToServer, lastQuery]);\r\n    }),\r\n    map(response => {\r\n      const result: QueryResultsModel = response[0];\r\n      const lastQuery: QueryParamsModel = response[1];\r\n      return new PropertiesPageLoaded({\r\n        properties: result.items,\r\n        totalCount: result.totalCount,\r\n        page: lastQuery\r\n      });\r\n    }),\r\n  );\r\n\r\n  @Effect()\r\n  deleteproperty$: Observable<PropertiesPageToggleLoading> = this.actions$.pipe(\r\n    ofType<OnePropertyDeleted>(PropertyActionTypes.OnePropertyDeleted),\r\n    mergeMap(({ payload }) => {\r\n      this.store.dispatch(this.showLoadingDistpatcher);\r\n      return this.propertiesService.deleteProperty(payload.id);\r\n    }\r\n    ),\r\n    map(() => {\r\n      return this.hideActionLoadingDistpatcher;\r\n    }),\r\n  );\r\n\r\n  @Effect()\r\n  deleteProperties$: Observable<PropertiesPageToggleLoading> = this.actions$.pipe(\r\n    ofType<ManyPropertiesDeleted>(PropertyActionTypes.ManyPropertiesDeleted),\r\n    mergeMap(({ payload }) => {\r\n      this.store.dispatch(this.showLoadingDistpatcher);\r\n      return this.propertiesService.deleteProperties(payload.ids);\r\n    }\r\n    ),\r\n    map(() => {\r\n      return this.hideActionLoadingDistpatcher;\r\n    }),\r\n  );\r\n\r\n  /*@Effect()\r\n  updatePropertiesStatus$: Observable<PropertiesPageToggleLoading> = this.actions$.pipe(\r\n    ofType<PropertiesStatusUpdated>(PropertyActionTypes.PropertiesStatusUpdated),\r\n    mergeMap(({ payload }) => {\r\n      this.store.dispatch(this.showLoadingDistpatcher);\r\n      return this.propertiesService.updateStatusForProperty(payload.properties, payload.status);\r\n    }),\r\n    map(() => {\r\n      return this.hideActionLoadingDistpatcher;\r\n    }),\r\n  );*/\r\n\r\n  @Effect()\r\n  updateProperty$: Observable<PropertiesPageToggleLoading> = this.actions$.pipe(\r\n    ofType<PropertyUpdated>(PropertyActionTypes.PropertyUpdated),\r\n    mergeMap(({ payload }) => {\r\n      this.store.dispatch(this.showLoadingDistpatcher);\r\n      return this.propertiesService.updateProperty(payload.property);\r\n    }),\r\n    map(() => {\r\n      return this.hideActionLoadingDistpatcher;\r\n    }),\r\n  );\r\n\r\n  @Effect()\r\n  createProperty$: Observable<PropertiesPageToggleLoading> = this.actions$.pipe(\r\n    ofType<PropertyOnServerCreated>(PropertyActionTypes.PropertyOnServerCreated),\r\n    mergeMap(({ payload }) => {\r\n      this.store.dispatch(this.showLoadingDistpatcher);\r\n      return this.propertiesService.createProperty(payload.property).pipe(\r\n        tap(res => {\r\n          this.store.dispatch(new PropertyCreated({ property: res }));\r\n        })\r\n      );\r\n    }),\r\n    map(() => {\r\n      return this.hideActionLoadingDistpatcher;\r\n    }),\r\n  );\r\n\r\n  constructor(private actions$: Actions, private propertiesService: PropertiesService, private store: Store<AppState>) {\r\n  }\r\n}\r\n"]}