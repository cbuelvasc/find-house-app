{"version":3,"sources":["products.service.fake.ts"],"names":[],"mappings":"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","file":"products.service.fake.js","sourcesContent":["// Angular\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n// RxJS\r\nimport { Observable, forkJoin, BehaviorSubject, of } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\n// CRUD\r\nimport { HttpUtilsService, QueryParamsModel, QueryResultsModel } from '../../_base/crud';\r\n// Models\r\nimport { ProductModel } from '../_models/product.model';\r\nimport { each } from 'lodash';\r\n\r\nconst API_PRODUCTS_URL = 'api/products';\r\n// Fake REST API (Mock)\r\n// This method emulates server calls\r\n@Injectable()\r\nexport class ProductsService {\r\n  lastFilter$: BehaviorSubject<QueryParamsModel> = new BehaviorSubject(new QueryParamsModel({}, 'asc', '', 0, 10));\r\n\r\n  constructor(private http: HttpClient,\r\n    private httpUtils: HttpUtilsService) {\r\n  }\r\n\r\n  // CREATE =>  POST: add a new product to the server\r\n  createProduct(product): Observable<ProductModel> {\r\n    const httpHeaders = this.httpUtils.getHTTPHeaders();\r\n    return this.http.post<ProductModel>(API_PRODUCTS_URL, product, { headers: httpHeaders });\r\n  }\r\n\r\n  // READ\r\n  getAllProducts(): Observable<ProductModel[]> {\r\n    return this.http.get<ProductModel[]>(API_PRODUCTS_URL);\r\n  }\r\n\r\n  getProductById(productId: number): Observable<ProductModel> {\r\n    return this.http.get<ProductModel>(API_PRODUCTS_URL + `/${productId}`);\r\n  }\r\n\r\n  findProducts(queryParams: QueryParamsModel): Observable<QueryResultsModel> {\r\n    return this.getAllProducts().pipe(\r\n      mergeMap(res => {\r\n        const result = this.httpUtils.baseFilter(res, queryParams, ['status', 'condition']);\r\n        return of(result);\r\n      })\r\n    );\r\n  }\r\n\r\n  // UPDATE => PUT: update the product on the server\r\n  updateProduct(product: ProductModel): Observable<any> {\r\n    // Note: Add headers if needed (tokens/bearer)\r\n    const httpHeaders = this.httpUtils.getHTTPHeaders();\r\n    return this.http.put(API_PRODUCTS_URL, product, { headers: httpHeaders });\r\n  }\r\n\r\n  // UPDATE Status\r\n  // Comment this when you start work with real server\r\n  // This code imitates server calls\r\n  updateStatusForProduct(products: ProductModel[], status: number): Observable<any> {\r\n    const tasks$ = [];\r\n    each(products, element => {\r\n      const _product = Object.assign({}, element);\r\n      _product.status = status;\r\n      tasks$.push(this.updateProduct(_product));\r\n    });\r\n    return forkJoin(tasks$);\r\n  }\r\n\r\n  // DELETE => delete the product from the server\r\n  deleteProduct(productId: string): Observable<ProductModel> {\r\n    const url = `${API_PRODUCTS_URL}/${productId}`;\r\n    return this.http.delete<ProductModel>(url);\r\n  }\r\n\r\n  deleteProducts(ids: string[] = []): Observable<any> {\r\n    const tasks$ = [];\r\n    const length = ids.length;\r\n    // tslint:disable-next-line:prefer-const\r\n    for (let i = 0; i < length; i++) {\r\n      tasks$.push(this.deleteProduct(ids[i]));\r\n    }\r\n    return forkJoin(tasks$);\r\n  }\r\n}\r\n"]}