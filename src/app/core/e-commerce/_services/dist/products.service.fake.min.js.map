{"version":3,"sources":["products.service.fake.ts"],"names":["core_1","require","rxjs_1","operators_1","crud_1","lodash_1","API_PRODUCTS_URL","ProductsService","http","httpUtils","this","lastFilter$","BehaviorSubject","QueryParamsModel","prototype","createProduct","product","httpHeaders","getHTTPHeaders","post","headers","getAllProducts","get","getProductById","productId","findProducts","queryParams","_this","pipe","mergeMap","res","result","baseFilter","of","updateProduct","put","updateStatusForProduct","products","status","tasks$","each","element","_product","Object","assign","push","forkJoin","deleteProduct","url","deleteProducts","ids","length","i","__decorate","Injectable","exports"],"mappings":"6YACA,IAAAA,OAAAC,QAAA,iBAGAC,OAAAD,QAAA,QACAE,YAAAF,QAAA,kBAEAG,OAAAH,QAAA,oBAGAI,SAAAJ,QAAA,UAEMK,iBAAmB,eAIzBC,gBAAA,WAGE,SAAAA,EAAoBC,EACVC,GADUC,KAAAF,KAAAA,EACVE,KAAAD,UAAAA,EAHVC,KAAAC,YAAiD,IAAIT,OAAAU,gBAAgB,IAAIR,OAAAS,iBAAiB,GAAI,MAAO,GAAI,EAAG,KAiE9G,OA1DEN,EAAAO,UAAAC,cAAA,SAAcC,GACZ,IAAMC,EAAcP,KAAKD,UAAUS,iBACnC,OAAOR,KAAKF,KAAKW,KAAmBb,iBAAkBU,EAAS,CAAEI,QAASH,KAI5EV,EAAAO,UAAAO,eAAA,WACE,OAAOX,KAAKF,KAAKc,IAAoBhB,mBAGvCC,EAAAO,UAAAS,eAAA,SAAeC,GACb,OAAOd,KAAKF,KAAKc,IAAkBhB,iBAAmB,IAAIkB,IAG5DjB,EAAAO,UAAAW,aAAA,SAAaC,GAAb,IAAAC,EAAAjB,KACE,OAAOA,KAAKW,iBAAiBO,KAC3BzB,YAAA0B,SAAS,SAAAC,GACP,IAAMC,EAASJ,EAAKlB,UAAUuB,WAAWF,EAAKJ,EAAa,CAAC,SAAU,cACtE,OAAOxB,OAAA+B,GAAGF,OAMhBxB,EAAAO,UAAAoB,cAAA,SAAclB,GAEZ,IAAMC,EAAcP,KAAKD,UAAUS,iBACnC,OAAOR,KAAKF,KAAK2B,IAAI7B,iBAAkBU,EAAS,CAAEI,QAASH,KAM7DV,EAAAO,UAAAsB,uBAAA,SAAuBC,EAA0BC,GAAjD,IAAAX,EAAAjB,KACQ6B,EAAS,GAMf,OALAlC,SAAAmC,KAAKH,EAAU,SAAAI,GACb,IAAMC,EAAWC,OAAOC,OAAO,GAAIH,GACnCC,EAASJ,OAASA,EAClBC,EAAOM,KAAKlB,EAAKO,cAAcQ,MAE1BxC,OAAA4C,SAASP,IAIlBhC,EAAAO,UAAAiC,cAAA,SAAcvB,GACZ,IAAMwB,EAAS1C,iBAAgB,IAAIkB,EACnC,OAAOd,KAAKF,KAAW,OAAewC,IAGxCzC,EAAAO,UAAAmC,eAAA,SAAeC,QAAA,IAAAA,IAAAA,EAAA,IAIb,IAHA,IAAMX,EAAS,GACTY,EAASD,EAAIC,OAEVC,EAAI,EAAGA,EAAID,EAAQC,IAC1Bb,EAAOM,KAAKnC,KAAKqC,cAAcG,EAAIE,KAErC,OAAOlD,OAAA4C,SAASP,IAhEPhC,EAAe8C,WAAA,CAD3BrD,OAAAsD,cACY/C,GAAb,GAAagD,QAAAhD,gBAAAA","file":"products.service.fake.min.js","sourcesContent":["// Angular\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n// RxJS\r\nimport { Observable, forkJoin, BehaviorSubject, of } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\n// CRUD\r\nimport { HttpUtilsService, QueryParamsModel, QueryResultsModel } from '../../_base/crud';\r\n// Models\r\nimport { ProductModel } from '../_models/product.model';\r\nimport { each } from 'lodash';\r\n\r\nconst API_PRODUCTS_URL = 'api/products';\r\n// Fake REST API (Mock)\r\n// This method emulates server calls\r\n@Injectable()\r\nexport class ProductsService {\r\n  lastFilter$: BehaviorSubject<QueryParamsModel> = new BehaviorSubject(new QueryParamsModel({}, 'asc', '', 0, 10));\r\n\r\n  constructor(private http: HttpClient,\r\n    private httpUtils: HttpUtilsService) {\r\n  }\r\n\r\n  // CREATE =>  POST: add a new product to the server\r\n  createProduct(product): Observable<ProductModel> {\r\n    const httpHeaders = this.httpUtils.getHTTPHeaders();\r\n    return this.http.post<ProductModel>(API_PRODUCTS_URL, product, { headers: httpHeaders });\r\n  }\r\n\r\n  // READ\r\n  getAllProducts(): Observable<ProductModel[]> {\r\n    return this.http.get<ProductModel[]>(API_PRODUCTS_URL);\r\n  }\r\n\r\n  getProductById(productId: number): Observable<ProductModel> {\r\n    return this.http.get<ProductModel>(API_PRODUCTS_URL + `/${productId}`);\r\n  }\r\n\r\n  findProducts(queryParams: QueryParamsModel): Observable<QueryResultsModel> {\r\n    return this.getAllProducts().pipe(\r\n      mergeMap(res => {\r\n        const result = this.httpUtils.baseFilter(res, queryParams, ['status', 'condition']);\r\n        return of(result);\r\n      })\r\n    );\r\n  }\r\n\r\n  // UPDATE => PUT: update the product on the server\r\n  updateProduct(product: ProductModel): Observable<any> {\r\n    // Note: Add headers if needed (tokens/bearer)\r\n    const httpHeaders = this.httpUtils.getHTTPHeaders();\r\n    return this.http.put(API_PRODUCTS_URL, product, { headers: httpHeaders });\r\n  }\r\n\r\n  // UPDATE Status\r\n  // Comment this when you start work with real server\r\n  // This code imitates server calls\r\n  updateStatusForProduct(products: ProductModel[], status: number): Observable<any> {\r\n    const tasks$ = [];\r\n    each(products, element => {\r\n      const _product = Object.assign({}, element);\r\n      _product.status = status;\r\n      tasks$.push(this.updateProduct(_product));\r\n    });\r\n    return forkJoin(tasks$);\r\n  }\r\n\r\n  // DELETE => delete the product from the server\r\n  deleteProduct(productId: string): Observable<ProductModel> {\r\n    const url = `${API_PRODUCTS_URL}/${productId}`;\r\n    return this.http.delete<ProductModel>(url);\r\n  }\r\n\r\n  deleteProducts(ids: string[] = []): Observable<any> {\r\n    const tasks$ = [];\r\n    const length = ids.length;\r\n    // tslint:disable-next-line:prefer-const\r\n    for (let i = 0; i < length; i++) {\r\n      tasks$.push(this.deleteProduct(ids[i]));\r\n    }\r\n    return forkJoin(tasks$);\r\n  }\r\n}\r\n"]}