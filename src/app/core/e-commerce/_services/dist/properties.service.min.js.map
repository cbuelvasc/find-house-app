{"version":3,"sources":["properties.service.ts"],"names":["core_1","require","http_1","rxjs_1","crud_1","environment_1","API_PROPERTIES_URL","PropertiesService","http","httpUtils","this","url","lastFilter$","BehaviorSubject","QueryParamsModel","prototype","getFeaturedProperties","get","getProperties","getPropertyByIdTwo","id","getPropertyTypes","name","createProperty","property","httpHeaders","getHTTPHeaders","post","headers","getAllProperties","getPropertyById","propertyId","findProperties","queryParams","console","log","updateProperty","put","updateStatusForProperty","status","body","productsForUpdate","newStatus","deleteProperty","deleteProperties","ids","prdocutIdsForDelete","userToken","localStorage","getItem","environment","authTokenKey","HttpHeaders","set","__decorate","Injectable","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBACAC,OAAAD,QAAA,wBACAE,OAAAF,QAAA,QAGAG,OAAAH,QAAA,oBACAI,cAAAJ,QAAA,wCAEMK,mBAAqB,qCAG3BC,kBAAA,WAME,SAAAA,EAAoBC,EAA0BC,GAA1BC,KAAAF,KAAAA,EAA0BE,KAAAD,UAAAA,EAJ9CC,KAAAC,IAAM,2BAEND,KAAAE,YAAiD,IAAIT,OAAAU,gBAAgB,IAAIT,OAAAU,iBAAiB,GAAI,MAAO,GAAI,EAAG,KA8E9G,OAzESP,EAAAQ,UAAAC,sBAAP,WACE,OAAON,KAAKF,KAAKS,IAAwBP,KAAKC,IAAG,6BAG5CJ,EAAAQ,UAAAG,cAAP,WACE,OAAOR,KAAKF,KAAKS,IAAqBX,qBAGjCC,EAAAQ,UAAAI,mBAAP,SAA0BC,GACxB,OAAOV,KAAKF,KAAKS,IAAsBP,KAAKC,IAAG,YAAYS,EAAE,UAGxDb,EAAAQ,UAAAM,iBAAP,WACE,MAAO,CACL,CAAED,GAAI,EAAGE,KAAM,UACf,CAAEF,GAAI,EAAGE,KAAM,SACf,CAAEF,GAAI,EAAGE,KAAM,eAInBf,EAAAQ,UAAAQ,eAAA,SAAeC,GACb,IAAMC,EAAcf,KAAKD,UAAUiB,iBACnC,OAAOhB,KAAKF,KAAKmB,KAAoBrB,mBAAoBkB,EAAU,CAAEI,QAASH,KAGhFlB,EAAAQ,UAAAc,iBAAA,WACE,OAAOnB,KAAKF,KAAKS,IAAqBX,qBAGxCC,EAAAQ,UAAAe,gBAAA,SAAgBC,GACd,OAAOrB,KAAKF,KAAKS,IAAmBX,mBAAqB,IAAIyB,IAG/DxB,EAAAQ,UAAAiB,eAAA,SAAeC,GAEb,OADAC,QAAQC,IAAI,kBACLzB,KAAKF,KAAKmB,KAAwBrB,mBAAqB,kBAAmB2B,EAAa,CAAEL,QAASlB,KAAKe,iBAGhHlB,EAAAQ,UAAAqB,eAAA,SAAeZ,GACb,IAAMC,EAAcf,KAAKD,UAAUiB,iBACnC,OAAOhB,KAAKF,KAAK6B,IAAI/B,mBAAoBkB,EAAU,CAAEI,QAASH,KAGhElB,EAAAQ,UAAAuB,wBAAA,SAAwBd,EAA2Be,GACjD,IAAMd,EAAcf,KAAKD,UAAUiB,iBAC7Bc,EAAO,CACXC,kBAAmBjB,EACnBkB,UAAWH,GAEP5B,EAAML,mBAAqB,gBACjC,OAAOI,KAAKF,KAAK6B,IAAI1B,EAAK6B,EAAM,CAAEZ,QAASH,KAG7ClB,EAAAQ,UAAA4B,eAAA,SAAeZ,GACb,IAAMpB,EAASL,mBAAkB,IAAIyB,EACrC,OAAOrB,KAAKF,KAAW,OAAgBG,IAGzCJ,EAAAQ,UAAA6B,iBAAA,SAAiBC,QAAA,IAAAA,IAAAA,EAAA,IACf,IAAMlC,EAAML,mBAAqB,UAC3BmB,EAAcf,KAAKD,UAAUiB,iBAC7Bc,EAAO,CAAEM,oBAAqBD,GACpC,OAAOnC,KAAKF,KAAK6B,IAAuB1B,EAAK6B,EAAM,CAAEZ,QAASH,KAGxDlB,EAAAQ,UAAAU,YAAR,WACE,IAAMsB,EAAYC,aAAaC,QAAQ5C,cAAA6C,YAAYC,cAC/C1B,EAAc,IAAIvB,OAAAkD,YAGtB,OADA3B,GADAA,EAAcA,EAAY4B,IAAI,eAAgB,qBACpBA,IAAI,gBAAiB,UAAUN,IA9EhDxC,EAAiB+C,WAAA,CAD7BtD,OAAAuD,cACYhD,GAAb,GAAaiD,QAAAjD,kBAAAA","file":"properties.service.min.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\n\r\nimport { PropertyModel } from '../_models/property.model';\r\nimport { HttpUtilsService, QueryParamsModel, QueryResultsModel } from '../../_base/crud';\r\nimport { environment } from '../../../../environments/environment';\r\n\r\nconst API_PROPERTIES_URL = 'http://localhost:3000/api/property';\r\n\r\n@Injectable()\r\nexport class PropertiesService {\r\n\r\n  url = '../../../../assets/data/';\r\n\r\n  lastFilter$: BehaviorSubject<QueryParamsModel> = new BehaviorSubject(new QueryParamsModel({}, 'asc', '', 0, 10));\r\n\r\n  constructor(private http: HttpClient, private httpUtils: HttpUtilsService) {\r\n  }\r\n\r\n  public getFeaturedProperties(): Observable<PropertyModel[]> {\r\n    return this.http.get<PropertyModel[]>(`${this.url}featured-properties.json`);\r\n  }\r\n\r\n  public getProperties(): Observable<PropertyModel[]> {\r\n    return this.http.get<PropertyModel[]>(API_PROPERTIES_URL);\r\n  }\r\n\r\n  public getPropertyByIdTwo(id: number): Observable<PropertyModel> {\r\n    return this.http.get<PropertyModel>(`${this.url}property-${id}.json`);\r\n  }\r\n\r\n  public getPropertyTypes(): Array<any> {\r\n    return [\r\n      { id: 1, name: 'Office' },\r\n      { id: 2, name: 'House' },\r\n      { id: 3, name: 'Apartment' }\r\n    ];\r\n  }\r\n\r\n  createProperty(property: PropertyModel): Observable<PropertyModel> {\r\n    const httpHeaders = this.httpUtils.getHTTPHeaders();\r\n    return this.http.post<PropertyModel>(API_PROPERTIES_URL, property, { headers: httpHeaders });\r\n  }\r\n\r\n  getAllProperties(): Observable<PropertyModel[]> {\r\n    return this.http.get<PropertyModel[]>(API_PROPERTIES_URL);\r\n  }\r\n\r\n  getPropertyById(propertyId: string): Observable<PropertyModel> {\r\n    return this.http.get<PropertyModel>(API_PROPERTIES_URL + `/${propertyId}`);\r\n  }\r\n\r\n  findProperties(queryParams: QueryParamsModel): Observable<QueryResultsModel> {\r\n    console.log('findProperties');\r\n    return this.http.post<QueryResultsModel>(API_PROPERTIES_URL + '/findProperties', queryParams, { headers: this.httpHeaders() });\r\n  }\r\n\r\n  updateProperty(property: PropertyModel): Observable<any> {\r\n    const httpHeaders = this.httpUtils.getHTTPHeaders();\r\n    return this.http.put(API_PROPERTIES_URL, property, { headers: httpHeaders });\r\n  }\r\n\r\n  updateStatusForProperty(property: PropertyModel[], status: string): Observable<any> {\r\n    const httpHeaders = this.httpUtils.getHTTPHeaders();\r\n    const body = {\r\n      productsForUpdate: property,\r\n      newStatus: status\r\n    };\r\n    const url = API_PROPERTIES_URL + '/updateStatus';\r\n    return this.http.put(url, body, { headers: httpHeaders });\r\n  }\r\n\r\n  deleteProperty(propertyId: string): Observable<PropertyModel> {\r\n    const url = `${API_PROPERTIES_URL}/${propertyId}`;\r\n    return this.http.delete<PropertyModel>(url);\r\n  }\r\n\r\n  deleteProperties(ids: string[] = []): Observable<any> {\r\n    const url = API_PROPERTIES_URL + '/delete';\r\n    const httpHeaders = this.httpUtils.getHTTPHeaders();\r\n    const body = { prdocutIdsForDelete: ids };\r\n    return this.http.put<QueryResultsModel>(url, body, { headers: httpHeaders });\r\n  }\r\n\r\n  private httpHeaders(): HttpHeaders {\r\n    const userToken = localStorage.getItem(environment.authTokenKey);\r\n    let httpHeaders = new HttpHeaders();\r\n    httpHeaders = httpHeaders.set('Content-Type', 'application/json');\r\n    httpHeaders = httpHeaders.set('Authorization', `Bearer ${userToken}`);\r\n    return httpHeaders;\r\n  }\r\n\r\n}\r\n"]}