{"version":3,"sources":["property.selectors.ts"],"names":["store_1","require","lodash_1","crud_1","exports","selectPropertiesState","createFeatureSelector","selectPropertyById","propertyId","createSelector","propertiesState","entities","selectPropertiesPageLoading","listLoading","selectPropertiesActionLoading","customersState","actionsloading","selectPropertiesPageLastQuery","lastQuery","selectLastCreatedPropertyId","lastCreatedPropertyId","selectPropertiesInitWaitingMessage","showInitWaitingMessage","selectPropertiesInStore","items","each","element","push","result","HttpExtenstionsModel","sortArray","sortField","sortOrder","QueryResultsModel","totalCount","selectHasPropertiesInStore","queryResult"],"mappings":"mCAAA,IAAAA,QAAAC,QAAA,eAEAC,SAAAD,QAAA,UAIAE,OAAAF,QAAA,oBAEaG,QAAAC,sBAAwBL,QAAAM,sBAAuC,cAE/DF,QAAAG,mBAAqB,SAACC,GAAuB,OAAAR,QAAAS,eACxDL,QAAAC,sBACA,SAAAK,GAAmB,OAAAA,EAAgBC,SAASH,MAGjCJ,QAAAQ,4BAA8BZ,QAAAS,eACzCL,QAAAC,sBACA,SAAAK,GAAmB,OAAAA,EAAgBG,cAGxBT,QAAAU,8BAAgCd,QAAAS,eAC3CL,QAAAC,sBACA,SAAAU,GAAkB,OAAAA,EAAeC,iBAGtBZ,QAAAa,8BAAgCjB,QAAAS,eAC3CL,QAAAC,sBACA,SAAAK,GAAmB,OAAAA,EAAgBQ,YAGxBd,QAAAe,4BAA8BnB,QAAAS,eACzCL,QAAAC,sBACA,SAAAK,GAAmB,OAAAA,EAAgBU,wBAGxBhB,QAAAiB,mCAAqCrB,QAAAS,eAChDL,QAAAC,sBACA,SAAAK,GAAmB,OAAAA,EAAgBY,yBAGxBlB,QAAAmB,wBAA0BvB,QAAAS,eACrCL,QAAAC,sBACA,SAAAK,GACE,IAAMc,EAAyB,GAC/BtB,SAAAuB,KAAKf,EAAgBC,SAAU,SAAAe,GAC7BF,EAAMG,KAAKD,KAEb,IACME,GADgB,IAAIzB,OAAA0B,sBAEVC,UAAUN,EAAOd,EAAgBQ,UAAUa,UAAWrB,EAAgBQ,UAAUc,WAChG,OAAO,IAAI7B,OAAA8B,kBAAkBL,EAAQlB,EAAgBwB,WAAY,MAIxD9B,QAAA+B,2BAA6BnC,QAAAS,eACxCL,QAAAmB,wBACA,SAAAa,GAEE,QAAKA,EAAYF","file":"property.selectors.min.js","sourcesContent":["import { createFeatureSelector, createSelector } from '@ngrx/store';\r\n\r\nimport { each } from 'lodash';\r\n\r\nimport { PropertiesState } from '../_reducers/property.reducers';\r\nimport { PropertyModel } from '../_models/property.model';\r\nimport { HttpExtenstionsModel, QueryResultsModel } from '../../_base/crud';\r\n\r\nexport const selectPropertiesState = createFeatureSelector<PropertiesState>('properties');\r\n\r\nexport const selectPropertyById = (propertyId: string) => createSelector(\r\n  selectPropertiesState,\r\n  propertiesState => propertiesState.entities[propertyId]\r\n);\r\n\r\nexport const selectPropertiesPageLoading = createSelector(\r\n  selectPropertiesState,\r\n  propertiesState => propertiesState.listLoading\r\n);\r\n\r\nexport const selectPropertiesActionLoading = createSelector(\r\n  selectPropertiesState,\r\n  customersState => customersState.actionsloading\r\n);\r\n\r\nexport const selectPropertiesPageLastQuery = createSelector(\r\n  selectPropertiesState,\r\n  propertiesState => propertiesState.lastQuery\r\n);\r\n\r\nexport const selectLastCreatedPropertyId = createSelector(\r\n  selectPropertiesState,\r\n  propertiesState => propertiesState.lastCreatedPropertyId\r\n);\r\n\r\nexport const selectPropertiesInitWaitingMessage = createSelector(\r\n  selectPropertiesState,\r\n  propertiesState => propertiesState.showInitWaitingMessage\r\n);\r\n\r\nexport const selectPropertiesInStore = createSelector(\r\n  selectPropertiesState,\r\n  propertiesState => {\r\n    const items: PropertyModel[] = [];\r\n    each(propertiesState.entities, element => {\r\n      items.push(element);\r\n    });\r\n    const httpExtension = new HttpExtenstionsModel();\r\n    const result: PropertyModel[] =\r\n      httpExtension.sortArray(items, propertiesState.lastQuery.sortField, propertiesState.lastQuery.sortOrder);\r\n    return new QueryResultsModel(result, propertiesState.totalCount, '');\r\n  }\r\n);\r\n\r\nexport const selectHasPropertiesInStore = createSelector(\r\n  selectPropertiesInStore,\r\n  queryResult => {\r\n    // tslint:disable-next-line\r\n    if (!queryResult.totalCount) {\r\n      return false;\r\n    }\r\n    // tslint:disable-next-line\r\n    return true;\r\n  }\r\n);\r\n"]}