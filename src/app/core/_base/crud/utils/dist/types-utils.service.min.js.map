{"version":3,"sources":["types-utils.service.ts"],"names":["core_1","require","TypesUtilsService","prototype","padNumber","value","this","isNumber","slice","isNaN","toInteger","parseInt","dateFormat","date","month","getMonth","day","getDate","year","getFullYear","dateCustomFormat","stringDate","getDateFormatterFromString","dateInStr","length","dateParts","trim","split","Date","getDay","getDateFromString","result","setDate","setMonth","setFullYear","getDateStringFromDate","__decorate","Injectable","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBAGAC,kBAAA,WAAA,SAAAA,KAmFA,OAjFEA,EAAAC,UAAAC,UAAA,SAAUC,GACR,OAAIC,KAAKC,SAASF,IACT,IAAIA,GAAQG,OAAO,GAEnB,IAIXN,EAAAC,UAAAI,SAAA,SAASF,GACP,OAAQI,MAAMH,KAAKI,UAAUL,KAG/BH,EAAAC,UAAAO,UAAA,SAAUL,GACR,OAAOM,SAAS,GAAGN,EAAS,KAG9BH,EAAAC,UAAAS,WAAA,SAAWC,GACT,IAAMC,EAAQD,EAAKE,WAAa,EAC1BC,EAAMH,EAAKI,UACXC,EAAOL,EAAKM,cAClB,OAAIN,EACQC,EAAK,IAAIE,EAAG,IAAIE,EAGrB,IAGThB,EAAAC,UAAAiB,iBAAA,SAAiBP,GACf,IAAIQ,EAAa,GAOjB,OANIR,IACFQ,GAAcf,KAAKC,SAASM,EAAKC,OAASR,KAAKF,UAAUS,EAAKC,OAAS,IAAM,GAC7EO,GAAcf,KAAKC,SAASM,EAAKG,KAAOV,KAAKF,UAAUS,EAAKG,KAAO,IAAM,GAEzEK,GAAcR,EAAKK,MAEdG,GAGTnB,EAAAC,UAAAmB,2BAAA,SAA2BC,GACzB,GAAIA,GAAgC,EAAnBA,EAAUC,OAAY,CACrC,IAAMC,EAAYF,EAAUG,OAAOC,MAAM,KACzC,MAAO,CACL,CACET,KAAMZ,KAAKI,UAAUe,EAAU,IAC/BX,MAAOR,KAAKI,UAAUe,EAAU,IAChCT,IAAKV,KAAKI,UAAUe,EAAU,MAIpC,IAAMZ,EAAO,IAAIe,KACjB,MAAO,CACL,CACEV,KAAML,EAAKM,cACXL,MAAOD,EAAKE,WAAa,EACzBC,IAAKH,EAAKgB,YAKhB3B,EAAAC,UAAA2B,kBAAA,SAAkBP,GAChB,QADgB,IAAAA,IAAAA,EAAA,IACZA,GAAgC,EAAnBA,EAAUC,OAAY,CACrC,IAAMC,EAAYF,EAAUG,OAAOC,MAAM,KACnCT,EAAOZ,KAAKI,UAAUe,EAAU,IAChCX,EAAQR,KAAKI,UAAUe,EAAU,IACjCT,EAAMV,KAAKI,UAAUe,EAAU,IAEjCM,EAAS,IAAIH,KAIjB,OAHAG,EAAOC,QAAQhB,GACfe,EAAOE,SAASnB,EAAQ,GACxBiB,EAAOG,YAAYhB,GACZa,EAET,OAAO,IAAIH,MAGb1B,EAAAC,UAAAgC,sBAAA,SAAsBtB,QAAA,IAAAA,IAAAA,EAAA,IAAiBe,MACrC,IAAMd,EAAQD,EAAKE,WAAa,EAC1BG,EAAOL,EAAKM,cAElB,OAAUL,EAAK,IADGD,EAAKI,UACK,IAAIC,GAjFvBhB,EAAiBkC,WAAA,CAD7BpC,OAAAqC,cACYnC,GAAb,GAAaoC,QAAApC,kBAAAA","file":"types-utils.service.min.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class TypesUtilsService {\r\n\r\n  padNumber(value: number) {\r\n    if (this.isNumber(value)) {\r\n      return `0${value}`.slice(-2);\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  isNumber(value: any): boolean {\r\n    return !isNaN(this.toInteger(value));\r\n  }\r\n\r\n  toInteger(value: any): number {\r\n    return parseInt(`${value}`, 10);\r\n  }\r\n\r\n  dateFormat(date: Date): string {\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n    const year = date.getFullYear();\r\n    if (date) {\r\n      return `${month}/${day}/${year}`;\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  dateCustomFormat(date: any): string {\r\n    let stringDate = '';\r\n    if (date) {\r\n      stringDate += this.isNumber(date.month) ? this.padNumber(date.month) + '/' : '';\r\n      stringDate += this.isNumber(date.day) ? this.padNumber(date.day) + '/' : '';\r\n\r\n      stringDate += date.year;\r\n    }\r\n    return stringDate;\r\n  }\r\n\r\n  getDateFormatterFromString(dateInStr: string): any {\r\n    if (dateInStr && dateInStr.length > 0) {\r\n      const dateParts = dateInStr.trim().split('/');\r\n      return [\r\n        {\r\n          year: this.toInteger(dateParts[2]),\r\n          month: this.toInteger(dateParts[0]),\r\n          day: this.toInteger(dateParts[1])\r\n        }\r\n      ];\r\n    }\r\n    const date = new Date();\r\n    return [\r\n      {\r\n        year: date.getFullYear(),\r\n        month: date.getMonth() + 1,\r\n        day: date.getDay()\r\n      }\r\n    ];\r\n  }\r\n\r\n  getDateFromString(dateInStr: string = ''): Date {\r\n    if (dateInStr && dateInStr.length > 0) {\r\n      const dateParts = dateInStr.trim().split('/');\r\n      const year = this.toInteger(dateParts[2]);\r\n      const month = this.toInteger(dateParts[0]);\r\n      const day = this.toInteger(dateParts[1]);\r\n      // tslint:disable-next-line:prefer-const\r\n      let result = new Date();\r\n      result.setDate(day);\r\n      result.setMonth(month - 1);\r\n      result.setFullYear(year);\r\n      return result;\r\n    }\r\n    return new Date();\r\n  }\r\n\r\n  getDateStringFromDate(date: Date = new Date()): string {\r\n    const month = date.getMonth() + 1;\r\n    const year = date.getFullYear();\r\n    const dateToday = date.getDate();\r\n    return `${month}/${dateToday}/${year}`;\r\n  }\r\n}\r\n"]}