{"version":3,"sources":["types-utils.service.ts"],"names":[],"mappings":"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","file":"types-utils.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class TypesUtilsService {\r\n\r\n  padNumber(value: number) {\r\n    if (this.isNumber(value)) {\r\n      return `0${value}`.slice(-2);\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  isNumber(value: any): boolean {\r\n    return !isNaN(this.toInteger(value));\r\n  }\r\n\r\n  toInteger(value: any): number {\r\n    return parseInt(`${value}`, 10);\r\n  }\r\n\r\n  dateFormat(date: Date): string {\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n    const year = date.getFullYear();\r\n    if (date) {\r\n      return `${month}/${day}/${year}`;\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  dateCustomFormat(date: any): string {\r\n    let stringDate = '';\r\n    if (date) {\r\n      stringDate += this.isNumber(date.month) ? this.padNumber(date.month) + '/' : '';\r\n      stringDate += this.isNumber(date.day) ? this.padNumber(date.day) + '/' : '';\r\n\r\n      stringDate += date.year;\r\n    }\r\n    return stringDate;\r\n  }\r\n\r\n  getDateFormatterFromString(dateInStr: string): any {\r\n    if (dateInStr && dateInStr.length > 0) {\r\n      const dateParts = dateInStr.trim().split('/');\r\n      return [\r\n        {\r\n          year: this.toInteger(dateParts[2]),\r\n          month: this.toInteger(dateParts[0]),\r\n          day: this.toInteger(dateParts[1])\r\n        }\r\n      ];\r\n    }\r\n    const date = new Date();\r\n    return [\r\n      {\r\n        year: date.getFullYear(),\r\n        month: date.getMonth() + 1,\r\n        day: date.getDay()\r\n      }\r\n    ];\r\n  }\r\n\r\n  getDateFromString(dateInStr: string = ''): Date {\r\n    if (dateInStr && dateInStr.length > 0) {\r\n      const dateParts = dateInStr.trim().split('/');\r\n      const year = this.toInteger(dateParts[2]);\r\n      const month = this.toInteger(dateParts[0]);\r\n      const day = this.toInteger(dateParts[1]);\r\n      // tslint:disable-next-line:prefer-const\r\n      let result = new Date();\r\n      result.setDate(day);\r\n      result.setMonth(month - 1);\r\n      result.setFullYear(year);\r\n      return result;\r\n    }\r\n    return new Date();\r\n  }\r\n\r\n  getDateStringFromDate(date: Date = new Date()): string {\r\n    const month = date.getMonth() + 1;\r\n    const year = date.getFullYear();\r\n    const dateToday = date.getDate();\r\n    return `${month}/${dateToday}/${year}`;\r\n  }\r\n}\r\n"]}