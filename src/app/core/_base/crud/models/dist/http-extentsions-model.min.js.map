{"version":3,"sources":["http-extentsions-model.ts"],"names":["query_results_model_1","require","HttpExtenstionsModel","prototype","baseFilter","entities","queryParams","filtrationFields","entitiesResult","this","searchInArray","filter","sortField","sortArray","sortOrder","totalCount","length","initialPos","pageNumber","pageSize","slice","queryResults","QueryResultsModel","items","incomingArray","sort","a","b","queryObj","result","resultBuffer","indexes","firstIndexes","doSearch","forEach","item","element","index","push","Object","keys","key","searchText","toString","trim","toLowerCase","some","e","indexOf","ex","console","log","re","exports"],"mappings":"mCACA,IAAAA,sBAAAC,QAAA,sCAEAC,qBAAA,WAAA,SAAAA,KA2FA,OAzFEA,EAAAC,UAAAC,WAAA,SAAWC,EAAiBC,EAA+BC,QAAA,IAAAA,IAAAA,EAAA,IACzD,IAAIC,EAAiBC,KAAKC,cAAcL,EAAUC,EAAYK,OAAQJ,GAElED,EAAYM,YACdJ,EAAiBC,KAAKI,UAAUL,EAAgBF,EAAYM,UAAWN,EAAYQ,YAGrF,IAAMC,EAAaP,EAAeQ,OAC5BC,EAAaX,EAAYY,WAAaZ,EAAYa,SACxDX,EAAiBA,EAAeY,MAAMH,EAAYA,EAAaX,EAAYa,UAE3E,IAAME,EAAe,IAAIrB,sBAAAsB,kBAGzB,OAFAD,EAAaE,MAAQf,EACrBa,EAAaN,WAAaA,EACnBM,GAGTnB,EAAAC,UAAAU,UAAA,SAAUW,EAAsBZ,EAAwBE,GACtD,QAD8B,IAAAF,IAAAA,EAAA,SAAwB,IAAAE,IAAAA,EAAA,QACjDF,EACH,OAAOY,EAeT,OAXSA,EAAcC,KAAK,SAACC,EAAGC,GAC9B,OAAID,EAAEd,GAAae,EAAEf,GACE,QAAdE,GAAuB,EAAI,EAGhCY,EAAEd,GAAae,EAAEf,GACE,QAAdE,EAAsB,GAAK,EAG7B,KAKXZ,EAAAC,UAAAO,cAAA,SAAcc,EAAsBI,EAAerB,QAAA,IAAAA,IAAAA,EAAA,IACjD,IAAMsB,EAAgB,GAClBC,EAAsB,GACpBC,EAAoB,GACtBC,EAAyB,GACzBC,GAAW,EAqCf,OAnCA1B,EAAiB2B,QAAQ,SAAAC,GACnBA,KAAQP,IACVJ,EAAcU,QAAQ,SAACE,EAASC,GAC1BD,EAAQD,KAAUP,EAASO,IAC7BH,EAAaM,KAAKD,KAGtBL,EAAaE,QAAQ,SAAAE,GACnBN,EAAaQ,KAAKd,EAAcY,MAElCZ,EAAgBM,EAAaV,MAAM,GACnCU,EAAe,GAAGV,MAAM,GACxBY,EAAe,GAAGZ,MAAM,MAI5BmB,OAAOC,KAAKZ,GAAUM,QAAQ,SAAAO,GAC5B,IAAMC,EAAad,EAASa,GAAKE,WAAWC,OAAOC,cACnD,GAAIJ,IAAQlC,EAAiBuC,KAAK,SAAAC,GAAK,OAAAA,IAAMN,KAAQC,EAAY,CAC/DT,GAAW,EACX,IACET,EAAcU,QAAQ,SAACE,EAASC,GAC1BD,EAAQK,KAEqB,EADnBL,EAAQK,GAAKE,WAAWC,OAAOC,cACnCG,QAAQN,KAAgD,IAA5BX,EAAQiB,QAAQX,IAClDN,EAAQO,KAAKD,KAInB,MAAOY,GACPC,QAAQC,IAAIF,EAAIR,EAAKC,OAKtBT,GAILF,EAAQG,QAAQ,SAAAkB,GACdvB,EAAOS,KAAKd,EAAc4B,MAGrBvB,GAPEL,GASbtB,EA3FA,GAAamD,QAAAnD,qBAAAA","file":"http-extentsions-model.min.js","sourcesContent":["import { QueryParamsModel } from './query-models/query-params.model';\r\nimport { QueryResultsModel } from './query-models/query-results.model';\r\n\r\nexport class HttpExtenstionsModel {\r\n\r\n  baseFilter(entities: any[], queryParams: QueryParamsModel, filtrationFields: string[] = []): QueryResultsModel {\r\n    let entitiesResult = this.searchInArray(entities, queryParams.filter, filtrationFields);\r\n\r\n    if (queryParams.sortField) {\r\n      entitiesResult = this.sortArray(entitiesResult, queryParams.sortField, queryParams.sortOrder);\r\n    }\r\n\r\n    const totalCount = entitiesResult.length;\r\n    const initialPos = queryParams.pageNumber * queryParams.pageSize;\r\n    entitiesResult = entitiesResult.slice(initialPos, initialPos + queryParams.pageSize);\r\n\r\n    const queryResults = new QueryResultsModel();\r\n    queryResults.items = entitiesResult;\r\n    queryResults.totalCount = totalCount;\r\n    return queryResults;\r\n  }\r\n\r\n  sortArray(incomingArray: any[], sortField: string = '', sortOrder: string = 'asc'): any[] {\r\n    if (!sortField) {\r\n      return incomingArray;\r\n    }\r\n\r\n    let result: any[] = [];\r\n    result = incomingArray.sort((a, b) => {\r\n      if (a[sortField] < b[sortField]) {\r\n        return sortOrder === 'asc' ? -1 : 1;\r\n      }\r\n\r\n      if (a[sortField] > b[sortField]) {\r\n        return sortOrder === 'asc' ? 1 : -1;\r\n      }\r\n\r\n      return 0;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  searchInArray(incomingArray: any[], queryObj: any, filtrationFields: string[] = []): any[] {\r\n    const result: any[] = [];\r\n    let resultBuffer: any[] = [];\r\n    const indexes: number[] = [];\r\n    let firstIndexes: number[] = [];\r\n    let doSearch = false;\r\n\r\n    filtrationFields.forEach(item => {\r\n      if (item in queryObj) {\r\n        incomingArray.forEach((element, index) => {\r\n          if (element[item] === queryObj[item]) {\r\n            firstIndexes.push(index);\r\n          }\r\n        });\r\n        firstIndexes.forEach(element => {\r\n          resultBuffer.push(incomingArray[element]);\r\n        });\r\n        incomingArray = resultBuffer.slice(0);\r\n        resultBuffer = [].slice(0);\r\n        firstIndexes = [].slice(0);\r\n      }\r\n    });\r\n\r\n    Object.keys(queryObj).forEach(key => {\r\n      const searchText = queryObj[key].toString().trim().toLowerCase();\r\n      if (key && !filtrationFields.some(e => e === key) && searchText) {\r\n        doSearch = true;\r\n        try {\r\n          incomingArray.forEach((element, index) => {\r\n            if (element[key]) {\r\n              const val = element[key].toString().trim().toLowerCase();\r\n              if (val.indexOf(searchText) > -1 && indexes.indexOf(index) === -1) {\r\n                indexes.push(index);\r\n              }\r\n            }\r\n          });\r\n        } catch (ex) {\r\n          console.log(ex, key, searchText);\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!doSearch) {\r\n      return incomingArray;\r\n    }\r\n\r\n    indexes.forEach(re => {\r\n      result.push(incomingArray[re]);\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n"]}