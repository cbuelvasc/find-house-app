{"version":3,"sources":["layout-config.service.ts"],"names":["core_1","require","rxjs_1","objectPath","lodash_1","localStorageKey","LayoutConfigService","this","onConfigUpdated$","Subject","prototype","saveConfig","layoutConfig","localStorage","setItem","JSON","stringify","getSavedConfig","config","getItem","parse","e","resetConfig","removeItem","getConfig","path","get","setConfig","value","save","merge","next","getLogo","logo","menuAsideLeftSkin","logoObject","logos","Object","keys","getStickyLogo","loadConfigs","demo","reloadConfigs","__decorate","Injectable","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBACAC,OAAAD,QAAA,QACAE,WAAAF,QAAA,eACAG,SAAAH,QAAA,UAIMI,gBAAkB,eAGxBC,oBAAA,WAKE,SAAAA,IACEC,KAAKC,iBAAmB,IAAIN,OAAAO,QAgFhC,OA7EEH,EAAAI,UAAAC,WAAA,SAAWC,GACLA,GACFC,aAAaC,QAAQT,gBAAiBU,KAAKC,UAAUJ,KAIzDN,EAAAI,UAAAO,eAAA,WACE,IAAMC,EAASL,aAAaM,QAAQd,iBACpC,IACE,OAAOU,KAAKK,MAAMF,GAClB,MAAOG,MAIXf,EAAAI,UAAAY,YAAA,WACET,aAAaU,WAAW,iBAG1BjB,EAAAI,UAAAc,UAAA,SAAUC,GAER,OADAlB,KAAKK,aAAeL,KAAKU,iBACrBQ,EACKtB,WAAWuB,IAAInB,KAAKK,aAAca,GAEpClB,KAAKK,cAGdN,EAAAI,UAAAiB,UAAA,SAAUC,EAAYC,GACpBtB,KAAKK,aAAeR,SAAA0B,MAAMvB,KAAKK,aAAcgB,GACzCC,GACFtB,KAAKI,WAAWJ,KAAKK,cAEvBL,KAAKC,iBAAiBuB,KAAKxB,KAAKK,eAGlCN,EAAAI,UAAAsB,QAAA,WACE,IAIIC,EAJEC,EAAoB/B,WAAWuB,IAAInB,KAAKK,aAAc,oBAEtDuB,EAAahC,WAAWuB,IAAInB,KAAKK,aAAc,aASrD,GAN0B,iBAAfuB,IACTF,EAAOE,GAEiB,iBAAfA,IACTF,EAAO9B,WAAWuB,IAAIS,EAAYD,EAAoB,UAEpC,IAATD,EACT,IACE,IAAMG,EAAQjC,WAAWuB,IAAInB,KAAKK,aAAc,aAChDqB,EAAOG,EAAMC,OAAOC,KAAKF,GAAO,IAChC,MAAOf,IAGX,OAAOY,GAGT3B,EAAAI,UAAA6B,cAAA,WACE,IAAIN,EAAO9B,WAAWuB,IAAInB,KAAKK,aAAc,oBAI7C,YAHoB,IAATqB,IACTA,EAAO1B,KAAKyB,WAEPC,EAAO,IAGhB3B,EAAAI,UAAA8B,YAAA,SAAYtB,GACVX,KAAKK,aAAeL,KAAKU,iBACpBV,KAAKK,cAAgBT,WAAWuB,IAAInB,KAAKK,aAAc,UAAYM,EAAOuB,OAC7ElC,KAAKK,aAAeM,GAEtBX,KAAKI,WAAWJ,KAAKK,eAGvBN,EAAAI,UAAAgC,cAAA,WAGE,OAFAnC,KAAKK,aAAeL,KAAKU,iBACzBV,KAAKC,iBAAiBuB,KAAKxB,KAAKK,cACzBL,KAAKK,cApFHN,EAAmBqC,WAAA,CAD/B3C,OAAA4C,cACYtC,GAAb,GAAauC,QAAAvC,oBAAAA","file":"layout-config.service.min.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport * as objectPath from 'object-path';\r\nimport { merge } from 'lodash';\r\n\r\nimport { LayoutConfigModel } from '../models/layout-config.model';\r\n\r\nconst localStorageKey = 'layoutConfig';\r\n\r\n@Injectable()\r\nexport class LayoutConfigService {\r\n\r\n  onConfigUpdated$: Subject<LayoutConfigModel>;\r\n  layoutConfig: LayoutConfigModel;\r\n\r\n  constructor() {\r\n    this.onConfigUpdated$ = new Subject();\r\n  }\r\n\r\n  saveConfig(layoutConfig: LayoutConfigModel): void {\r\n    if (layoutConfig) {\r\n      localStorage.setItem(localStorageKey, JSON.stringify(layoutConfig));\r\n    }\r\n  }\r\n\r\n  getSavedConfig(): LayoutConfigModel {\r\n    const config = localStorage.getItem(localStorageKey);\r\n    try {\r\n      return JSON.parse(config);\r\n    } catch (e) {\r\n    }\r\n  }\r\n\r\n  resetConfig(): void {\r\n    localStorage.removeItem('layoutConfig');\r\n  }\r\n\r\n  getConfig(path?: string): LayoutConfigModel | any {\r\n    this.layoutConfig = this.getSavedConfig();\r\n    if (path) {\r\n      return objectPath.get(this.layoutConfig, path);\r\n    }\r\n    return this.layoutConfig;\r\n  }\r\n\r\n  setConfig(value: any, save?: boolean): void {\r\n    this.layoutConfig = merge(this.layoutConfig, value);\r\n    if (save) {\r\n      this.saveConfig(this.layoutConfig);\r\n    }\r\n    this.onConfigUpdated$.next(this.layoutConfig);\r\n  }\r\n\r\n  getLogo(): string {\r\n    const menuAsideLeftSkin = objectPath.get(this.layoutConfig, 'brand.self.theme');\r\n    // set brand logo\r\n    const logoObject = objectPath.get(this.layoutConfig, 'self.logo');\r\n\r\n    let logo;\r\n    if (typeof logoObject === 'string') {\r\n      logo = logoObject;\r\n    }\r\n    if (typeof logoObject === 'object') {\r\n      logo = objectPath.get(logoObject, menuAsideLeftSkin + '');\r\n    }\r\n    if (typeof logo === 'undefined') {\r\n      try {\r\n        const logos = objectPath.get(this.layoutConfig, 'self.logo');\r\n        logo = logos[Object.keys(logos)[0]];\r\n      } catch (e) {\r\n      }\r\n    }\r\n    return logo;\r\n  }\r\n\r\n  getStickyLogo(): string {\r\n    let logo = objectPath.get(this.layoutConfig, 'self.logo.sticky');\r\n    if (typeof logo === 'undefined') {\r\n      logo = this.getLogo();\r\n    }\r\n    return logo + '';\r\n  }\r\n\r\n  loadConfigs(config: LayoutConfigModel) {\r\n    this.layoutConfig = this.getSavedConfig();\r\n    if (!this.layoutConfig || objectPath.get(this.layoutConfig, 'demo') !== config.demo) {\r\n      this.layoutConfig = config;\r\n    }\r\n    this.saveConfig(this.layoutConfig);\r\n  }\r\n\r\n  reloadConfigs(): LayoutConfigModel {\r\n    this.layoutConfig = this.getSavedConfig();\r\n    this.onConfigUpdated$.next(this.layoutConfig);\r\n    return this.layoutConfig;\r\n  }\r\n}\r\n"]}