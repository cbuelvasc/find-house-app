{"version":3,"sources":["sparkline-chart.directive.ts"],"names":["core_1","require","Chart_min_js_1","SparklineChartDirective","el","layoutConfigService","this","prototype","ngAfterViewInit","initChart","nativeElement","options","data","color","border","fill","tooltip","src","length","config","type","labels","datasets","label","borderColor","borderWidth","pointHoverRadius","pointHoverBorderWidth","pointBackgroundColor","Chart","helpers","alpha","rgbString","pointBorderColor","pointHoverBackgroundColor","getConfig","pointHoverBorderColor","title","display","tooltips","enabled","intersect","mode","xPadding","yPadding","caretPadding","legend","usePointStyle","responsive","maintainAspectRatio","hover","scales","xAxes","gridLines","scaleLabel","labelString","yAxes","ticks","beginAtZero","elements","point","radius","layout","padding","left","right","top","bottom","chart","getChart","__decorate","Input","Directive","selector","exportAs","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBACAC,eAAAD,QAAA,8BAgBAE,wBAAA,WAME,SAAAA,EAAoBC,EAAwBC,GAAxBC,KAAAF,GAAAA,EAAwBE,KAAAD,oBAAAA,EA6G9C,OA1GEF,EAAAI,UAAAC,gBAAA,WACEF,KAAKG,UAAUH,KAAKF,GAAGM,cACrBJ,KAAKK,QAAQC,KACbN,KAAKK,QAAQE,MACbP,KAAKK,QAAQG,OACbR,KAAKK,QAAQI,KACbT,KAAKK,QAAQK,UAGjBb,EAAAI,UAAAE,UAAA,SAAUQ,EAAKL,EAAMC,EAAOC,EAAQC,EAAMC,GACxC,GAAmB,IAAfC,EAAIC,OAAR,CAKAH,OAAwB,IAATA,GAAwBA,EACvCC,OAA8B,IAAZA,GAA2BA,EAE7C,IAAMG,EAAS,CACbC,KAAM,OACNR,KAAM,CACJS,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,WAChGC,SAAU,CAAC,CACTC,MAAO,GACPC,YAAaX,EACbY,YAAaX,EAEbY,iBAAkB,EAClBC,sBAAuB,GACvBC,qBAAsB1B,eAAA2B,MAAMC,QAAQjB,MAAM,WAAWkB,MAAM,GAAGC,YAC9DC,iBAAkB/B,eAAA2B,MAAMC,QAAQjB,MAAM,WAAWkB,MAAM,GAAGC,YAC1DE,0BAA2B5B,KAAKD,oBAAoB8B,UAAU,uBAC9DC,sBAAuBlC,eAAA2B,MAAMC,QAAQjB,MAAM,WAAWkB,MAAM,IAAKC,YACjEjB,MAAM,EACNH,KAAIA,KAGRD,QAAS,CACP0B,MAAO,CACLC,SAAS,GAEXC,SAAU,CACRC,SAAS,EACTC,WAAW,EACXC,KAAM,UACNC,SAAU,GACVC,SAAU,GACVC,aAAc,IAEhBC,OAAQ,CACNR,SAAS,EACTjB,OAAQ,CACN0B,eAAe,IAGnBC,YAAY,EACZC,qBAAqB,EACrBC,MAAO,CACLR,KAAM,SAERS,OAAQ,CACNC,MAAO,CAAC,CACNd,SAAS,EACTe,WAAW,EACXC,WAAY,CACVhB,SAAS,EACTiB,YAAa,WAGjBC,MAAO,CAAC,CACNlB,SAAS,EACTe,WAAW,EACXC,WAAY,CACVhB,SAAS,EACTiB,YAAa,SAEfE,MAAO,CACLC,aAAa,MAKnBC,SAAU,CACRC,MAAO,CACLC,OAAQ,EACRpC,YAAa,KAIjBqC,OAAQ,CACNC,QAAS,CACPC,KAAM,EACNC,MAAO,GACPC,IAAK,EACLC,OAAQ,MAMhB7D,KAAK8D,MAAQ,IAAIlE,eAAA2B,MAAMZ,EAAKE,KAG9BhB,EAAAI,UAAA8D,SAAA,WACE,OAAO/D,KAAK8D,OA/GLE,WAAA,CAARtE,OAAAuE,gCAFUpE,EAAuBmE,WAAA,CAJnCtE,OAAAwE,UAAU,CACTC,SAAU,sBACVC,SAAU,uBAECvE,GAAb,GAAawE,QAAAxE,wBAAAA","file":"sparkline-chart.directive.min.js","sourcesContent":["import { AfterViewInit, Directive, ElementRef, Input } from '@angular/core';\r\nimport { Chart } from 'chart.js/dist/Chart.min.js';\r\n\r\nimport { LayoutConfigService } from '../../layout/services/layout-config.service';\r\n\r\nexport interface SparklineChartOptions {\r\n  data: number[];\r\n  color: string;\r\n  border: number;\r\n  fill?: boolean;\r\n  tooltip?: boolean;\r\n}\r\n\r\n@Directive({\r\n  selector: '[appSparklineChart]',\r\n  exportAs: 'appSparklineChart'\r\n})\r\nexport class SparklineChartDirective implements AfterViewInit {\r\n\r\n  @Input() options: SparklineChartOptions;\r\n\r\n  private chart: Chart;\r\n\r\n  constructor(private el: ElementRef, private layoutConfigService: LayoutConfigService) {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.initChart(this.el.nativeElement,\r\n      this.options.data,\r\n      this.options.color,\r\n      this.options.border,\r\n      this.options.fill,\r\n      this.options.tooltip);\r\n  }\r\n\r\n  initChart(src, data, color, border, fill, tooltip) {\r\n    if (src.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // set default values\r\n    fill = (typeof fill !== 'undefined') ? fill : false;\r\n    tooltip = (typeof tooltip !== 'undefined') ? tooltip : false;\r\n\r\n    const config = {\r\n      type: 'line',\r\n      data: {\r\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October'],\r\n        datasets: [{\r\n          label: '',\r\n          borderColor: color,\r\n          borderWidth: border,\r\n\r\n          pointHoverRadius: 4,\r\n          pointHoverBorderWidth: 12,\r\n          pointBackgroundColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n          pointBorderColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n          pointHoverBackgroundColor: this.layoutConfigService.getConfig('colors.state.danger'),\r\n          pointHoverBorderColor: Chart.helpers.color('#000000').alpha(0.1).rgbString(),\r\n          fill: false,\r\n          data,\r\n        }]\r\n      },\r\n      options: {\r\n        title: {\r\n          display: false,\r\n        },\r\n        tooltips: {\r\n          enabled: false,\r\n          intersect: false,\r\n          mode: 'nearest',\r\n          xPadding: 10,\r\n          yPadding: 10,\r\n          caretPadding: 10\r\n        },\r\n        legend: {\r\n          display: false,\r\n          labels: {\r\n            usePointStyle: false\r\n          }\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: true,\r\n        hover: {\r\n          mode: 'index'\r\n        },\r\n        scales: {\r\n          xAxes: [{\r\n            display: false,\r\n            gridLines: false,\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: 'Month'\r\n            }\r\n          }],\r\n          yAxes: [{\r\n            display: false,\r\n            gridLines: false,\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: 'Value'\r\n            },\r\n            ticks: {\r\n              beginAtZero: true\r\n            }\r\n          }]\r\n        },\r\n\r\n        elements: {\r\n          point: {\r\n            radius: 4,\r\n            borderWidth: 12\r\n          },\r\n        },\r\n\r\n        layout: {\r\n          padding: {\r\n            left: 0,\r\n            right: 10,\r\n            top: 5,\r\n            bottom: 0\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    this.chart = new Chart(src, config);\r\n  }\r\n\r\n  getChart() {\r\n    return this.chart;\r\n  }\r\n}\r\n"]}