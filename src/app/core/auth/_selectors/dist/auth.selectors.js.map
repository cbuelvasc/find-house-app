{"version":3,"sources":["auth.selectors.ts"],"names":[],"mappings":"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","file":"auth.selectors.js","sourcesContent":["// NGRX\r\nimport {createSelector} from '@ngrx/store';\r\n// Lodash\r\nimport {each, find, some} from 'lodash';\r\n// Selectors\r\nimport {selectAllRoles} from './role.selectors';\r\nimport {selectAllPermissions} from './permission.selectors';\r\n// Models\r\nimport {Role} from '../_models/role.model';\r\nimport {Permission} from '../_models/permission.model';\r\n\r\nexport const selectAuthState = state => state.auth;\r\n\r\nexport const isLoggedIn = createSelector(selectAuthState, auth => auth.loggedIn);\r\n\r\nexport const isLoggedOut = createSelector(isLoggedIn, loggedIn => !loggedIn);\r\n\r\nexport const currentAuthToken = createSelector(selectAuthState, auth => auth.authToken);\r\n\r\nexport const isUserLoaded = createSelector(selectAuthState, auth => auth.isUserLoaded);\r\n\r\nexport const currentUser = createSelector(selectAuthState, auth => auth.user);\r\n\r\nexport const currentUserRoleIds = createSelector(\r\n    currentUser,\r\n    user => {\r\n      if (!user) {\r\n        return [];\r\n      }\r\n\r\n      return user.roles;\r\n    }\r\n);\r\n\r\nexport const currentUserPermissionsIds = createSelector(\r\n    currentUserRoleIds,\r\n    selectAllRoles,\r\n    (userRoleIds: string[], allRoles: Role[]) => {\r\n      return getPermissionsIdsFrom(userRoleIds, allRoles);\r\n    }\r\n);\r\n\r\nexport const checkHasUserPermission = (permissionId: string) => createSelector(\r\n    currentUserPermissionsIds,\r\n    (ids: string[]) => {\r\n      return ids.some(id => id === permissionId);\r\n    }\r\n);\r\n\r\nexport const currentUserPermissions = createSelector(\r\n    currentUserPermissionsIds,\r\n    selectAllPermissions,\r\n    (permissionIds: string[], allPermissions: Permission[]) => {\r\n      const result: Permission[] = [];\r\n      each(permissionIds, id => {\r\n        const userPermission = find(allPermissions, elem => elem.id === id);\r\n        if (userPermission) {\r\n          result.push(userPermission);\r\n        }\r\n      });\r\n      return result;\r\n    }\r\n);\r\n\r\nfunction getPermissionsIdsFrom(userRolesIds: string[] = [], allRoles: Role[] = []): string[] {\r\n  const userRoles: Role[] = [];\r\n  each(userRolesIds, (id: string) => {\r\n    const userRole = find(allRoles, (role: Role) => role.id === id);\r\n    if (userRole) {\r\n      userRoles.push(userRole);\r\n    }\r\n  });\r\n\r\n  const result: string[] = [];\r\n  each(userRoles, (role: Role) => {\r\n    each(role.permissions, id => {\r\n      if (!some(result, gid => gid === id)) {\r\n        result.push(id);\r\n      }\r\n    });\r\n  });\r\n  return result;\r\n}\r\n"]}