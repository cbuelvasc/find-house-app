{"version":3,"sources":["role.selectors.ts"],"names":["store_1","require","crud_1","fromRole","lodash_1","exports","selectRolesState","createFeatureSelector","selectRoleById","roleId","createSelector","rolesState","entities","selectAllRoles","selectAll","selectAllRolesIds","selectIds","allRolesLoaded","isAllRolesLoaded","selectRolesPageLoading","listLoading","selectRolesActionLoading","actionsloading","selectLastCreatedRoleId","lastCreatedRoleId","selectRolesShowInitWaitingMessage","showInitWaitingMessage","selectQueryResult","items","each","element","push","HttpExtenstionsModel","sortArray","lastQuery","sortField","sortOrder","QueryResultsModel","queryResult","queryRowsCount"],"mappings":"mCAGA,IAAAA,QAAAC,QAAA,eAEAC,OAAAD,QAAA,oBAGAE,SAAAF,QAAA,8BACAG,SAAAH,QAAA,UAEaI,QAAAC,iBAAmBN,QAAAO,sBAAkC,SAErDF,QAAAG,eAAiB,SAACC,GAAmB,OAAAT,QAAAU,eAC9CL,QAAAC,iBACA,SAAAK,GAAc,OAAAA,EAAWC,SAASH,MAGzBJ,QAAAQ,eAAiBb,QAAAU,eAC1BL,QAAAC,iBACAH,SAASW,WAGAT,QAAAU,kBAAoBf,QAAAU,eAC7BL,QAAAC,iBACAH,SAASa,WAGAX,QAAAY,eAAiBjB,QAAAU,eAC1BL,QAAAC,iBACA,SAAAK,GAAc,OAAAA,EAAWO,mBAIhBb,QAAAc,uBAAyBnB,QAAAU,eAClCL,QAAAC,iBACA,SAAAK,GAAc,OAAAA,EAAWS,cAGhBf,QAAAgB,yBAA2BrB,QAAAU,eACpCL,QAAAC,iBACA,SAAAK,GAAc,OAAAA,EAAWW,iBAGhBjB,QAAAkB,wBAA0BvB,QAAAU,eACnCL,QAAAC,iBACA,SAAAK,GAAc,OAAAA,EAAWa,oBAGhBnB,QAAAoB,kCAAoCzB,QAAAU,eAC7CL,QAAAC,iBACA,SAAAK,GAAc,OAAAA,EAAWe,yBAIhBrB,QAAAsB,kBAAoB3B,QAAAU,eAC7BL,QAAAC,iBACA,SAAAK,GACI,IAAMiB,EAAgB,GACtBxB,SAAAyB,KAAKlB,EAAWC,SAAU,SAAAkB,GACtBF,EAAMG,KAAKD,MAEO,IAAI5B,OAAA8B,sBACWC,UAAUL,EAAOjB,EAAWuB,UAAUC,UAAWxB,EAAWuB,UAAUE,WAC3G,OAAO,IAAIlC,OAAAmC,kBAAkB1B,EAAW2B,YAAa3B,EAAW4B","file":"role.selectors.min.js","sourcesContent":["import { Role } from './../_models/role.model';\r\n\r\n// NGRX\r\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\r\n// CRUD\r\nimport { QueryResultsModel, HttpExtenstionsModel } from '../../_base/crud';\r\n// State\r\nimport { RolesState } from '../_reducers/role.reducers';\r\nimport * as fromRole from '../_reducers/role.reducers';\r\nimport { each } from 'lodash';\r\n\r\nexport const selectRolesState = createFeatureSelector<RolesState>('roles');\r\n\r\nexport const selectRoleById = (roleId: string) => createSelector(\r\n    selectRolesState,\r\n    rolesState => rolesState.entities[roleId]\r\n);\r\n\r\nexport const selectAllRoles = createSelector(\r\n    selectRolesState,\r\n    fromRole.selectAll\r\n);\r\n\r\nexport const selectAllRolesIds = createSelector(\r\n    selectRolesState,\r\n    fromRole.selectIds\r\n);\r\n\r\nexport const allRolesLoaded = createSelector(\r\n    selectRolesState,\r\n    rolesState => rolesState.isAllRolesLoaded\r\n);\r\n\r\n\r\nexport const selectRolesPageLoading = createSelector(\r\n    selectRolesState,\r\n    rolesState => rolesState.listLoading\r\n);\r\n\r\nexport const selectRolesActionLoading = createSelector(\r\n    selectRolesState,\r\n    rolesState => rolesState.actionsloading\r\n);\r\n\r\nexport const selectLastCreatedRoleId = createSelector(\r\n    selectRolesState,\r\n    rolesState => rolesState.lastCreatedRoleId\r\n);\r\n\r\nexport const selectRolesShowInitWaitingMessage = createSelector(\r\n    selectRolesState,\r\n    rolesState => rolesState.showInitWaitingMessage\r\n);\r\n\r\n\r\nexport const selectQueryResult = createSelector(\r\n    selectRolesState,\r\n    rolesState => {\r\n        const items: Role[] = [];\r\n        each(rolesState.entities, element => {\r\n            items.push(element);\r\n        });\r\n        const httpExtension = new HttpExtenstionsModel();\r\n        const result: Role[] = httpExtension.sortArray(items, rolesState.lastQuery.sortField, rolesState.lastQuery.sortOrder);\r\n        return new QueryResultsModel(rolesState.queryResult, rolesState.queryRowsCount);\r\n    }\r\n);\r\n"]}