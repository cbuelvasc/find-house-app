{"version":3,"sources":["role.selectors.ts"],"names":[],"mappings":";;AAEA,OAAO;AACP,qCAAoE;AACpE,OAAO;AACP,yCAA2E;AAG3E,qDAAuD;AACvD,iCAA8B;AAEjB,QAAA,gBAAgB,GAAG,6BAAqB,CAAa,OAAO,CAAC,CAAC;AAE9D,QAAA,cAAc,GAAG,UAAC,MAAc,IAAK,OAAA,sBAAc,CAC5D,wBAAgB,EAChB,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,EAA3B,CAA2B,CAC5C,EAHiD,CAGjD,CAAC;AAEW,QAAA,cAAc,GAAG,sBAAc,CACxC,wBAAgB,EAChB,QAAQ,CAAC,SAAS,CACrB,CAAC;AAEW,QAAA,iBAAiB,GAAG,sBAAc,CAC3C,wBAAgB,EAChB,QAAQ,CAAC,SAAS,CACrB,CAAC;AAEW,QAAA,cAAc,GAAG,sBAAc,CACxC,wBAAgB,EAChB,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,gBAAgB,EAA3B,CAA2B,CAC5C,CAAC;AAGW,QAAA,sBAAsB,GAAG,sBAAc,CAChD,wBAAgB,EAChB,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,WAAW,EAAtB,CAAsB,CACvC,CAAC;AAEW,QAAA,wBAAwB,GAAG,sBAAc,CAClD,wBAAgB,EAChB,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,cAAc,EAAzB,CAAyB,CAC1C,CAAC;AAEW,QAAA,uBAAuB,GAAG,sBAAc,CACjD,wBAAgB,EAChB,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,iBAAiB,EAA5B,CAA4B,CAC7C,CAAC;AAEW,QAAA,iCAAiC,GAAG,sBAAc,CAC3D,wBAAgB,EAChB,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,sBAAsB,EAAjC,CAAiC,CAClD,CAAC;AAGW,QAAA,iBAAiB,GAAG,sBAAc,CAC3C,wBAAgB,EAChB,UAAA,UAAU;IACN,IAAM,KAAK,GAAW,EAAE,CAAC;IACzB,aAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAA,OAAO;QAC7B,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;IACH,IAAM,aAAa,GAAG,IAAI,2BAAoB,EAAE,CAAC;IACjD,IAAM,MAAM,GAAW,aAAa,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IACtH,OAAO,IAAI,wBAAiB,CAAC,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,cAAc,CAAC,CAAC;AACpF,CAAC,CACJ,CAAC","file":"role.selectors.js","sourcesContent":["import { Role } from './../_models/role.model';\r\n\r\n// NGRX\r\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\r\n// CRUD\r\nimport { QueryResultsModel, HttpExtenstionsModel } from '../../_base/crud';\r\n// State\r\nimport { RolesState } from '../_reducers/role.reducers';\r\nimport * as fromRole from '../_reducers/role.reducers';\r\nimport { each } from 'lodash';\r\n\r\nexport const selectRolesState = createFeatureSelector<RolesState>('roles');\r\n\r\nexport const selectRoleById = (roleId: string) => createSelector(\r\n    selectRolesState,\r\n    rolesState => rolesState.entities[roleId]\r\n);\r\n\r\nexport const selectAllRoles = createSelector(\r\n    selectRolesState,\r\n    fromRole.selectAll\r\n);\r\n\r\nexport const selectAllRolesIds = createSelector(\r\n    selectRolesState,\r\n    fromRole.selectIds\r\n);\r\n\r\nexport const allRolesLoaded = createSelector(\r\n    selectRolesState,\r\n    rolesState => rolesState.isAllRolesLoaded\r\n);\r\n\r\n\r\nexport const selectRolesPageLoading = createSelector(\r\n    selectRolesState,\r\n    rolesState => rolesState.listLoading\r\n);\r\n\r\nexport const selectRolesActionLoading = createSelector(\r\n    selectRolesState,\r\n    rolesState => rolesState.actionsloading\r\n);\r\n\r\nexport const selectLastCreatedRoleId = createSelector(\r\n    selectRolesState,\r\n    rolesState => rolesState.lastCreatedRoleId\r\n);\r\n\r\nexport const selectRolesShowInitWaitingMessage = createSelector(\r\n    selectRolesState,\r\n    rolesState => rolesState.showInitWaitingMessage\r\n);\r\n\r\n\r\nexport const selectQueryResult = createSelector(\r\n    selectRolesState,\r\n    rolesState => {\r\n        const items: Role[] = [];\r\n        each(rolesState.entities, element => {\r\n            items.push(element);\r\n        });\r\n        const httpExtension = new HttpExtenstionsModel();\r\n        const result: Role[] = httpExtension.sortArray(items, rolesState.lastQuery.sortField, rolesState.lastQuery.sortOrder);\r\n        return new QueryResultsModel(rolesState.queryResult, rolesState.queryRowsCount);\r\n    }\r\n);\r\n"]}