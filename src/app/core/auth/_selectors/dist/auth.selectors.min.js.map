{"version":3,"sources":["auth.selectors.ts"],"names":["store_1","require","lodash_1","role_selectors_1","permission_selectors_1","getPermissionsIdsFrom","userRolesIds","allRoles","userRoles","each","id","userRole","find","role","push","result","permissions","some","gid","exports","selectAuthState","state","auth","isLoggedIn","createSelector","loggedIn","isLoggedOut","currentAuthToken","authToken","isUserLoaded","currentUser","user","currentUserRoleIds","roles","currentUserPermissionsIds","selectAllRoles","userRoleIds","checkHasUserPermission","permissionId","ids","currentUserPermissions","selectAllPermissions","permissionIds","allPermissions","userPermission","elem"],"mappings":"mCACA,IAAAA,QAAAC,QAAA,eAEAC,SAAAD,QAAA,UAEAE,iBAAAF,QAAA,oBACAG,uBAAAH,QAAA,0BA0DA,SAASI,sBAAsBC,EAA6BC,QAA7B,IAAAD,IAAAA,EAAA,SAA6B,IAAAC,IAAAA,EAAA,IAC1D,IAAMC,EAAoB,GAC1BN,SAAAO,KAAKH,EAAc,SAACI,GAClB,IAAMC,EAAWT,SAAAU,KAAKL,EAAU,SAACM,GAAe,OAAAA,EAAKH,KAAOA,IACxDC,GACFH,EAAUM,KAAKH,KAInB,IAAMI,EAAmB,GAQzB,OAPAb,SAAAO,KAAKD,EAAW,SAACK,GACfX,SAAAO,KAAKI,EAAKG,YAAa,SAAAN,GAChBR,SAAAe,KAAKF,EAAQ,SAAAG,GAAO,OAAAA,IAAQR,KAC/BK,EAAOD,KAAKJ,OAIXK,EAtEII,QAAAC,gBAAkB,SAAAC,GAAS,OAAAA,EAAMC,MAEjCH,QAAAI,WAAavB,QAAAwB,eAAeL,QAAAC,gBAAiB,SAAAE,GAAQ,OAAAA,EAAKG,WAE1DN,QAAAO,YAAc1B,QAAAwB,eAAeL,QAAAI,WAAY,SAAAE,GAAY,OAACA,IAEtDN,QAAAQ,iBAAmB3B,QAAAwB,eAAeL,QAAAC,gBAAiB,SAAAE,GAAQ,OAAAA,EAAKM,YAEhET,QAAAU,aAAe7B,QAAAwB,eAAeL,QAAAC,gBAAiB,SAAAE,GAAQ,OAAAA,EAAKO,eAE5DV,QAAAW,YAAc9B,QAAAwB,eAAeL,QAAAC,gBAAiB,SAAAE,GAAQ,OAAAA,EAAKS,OAE3DZ,QAAAa,mBAAqBhC,QAAAwB,eAC9BL,QAAAW,YACA,SAAAC,GACE,OAAKA,EAIEA,EAAKE,MAHH,KAOFd,QAAAe,0BAA4BlC,QAAAwB,eACrCL,QAAAa,mBACA7B,iBAAAgC,eACA,SAACC,EAAuB7B,GACtB,OAAOF,sBAAsB+B,EAAa7B,KAInCY,QAAAkB,uBAAyB,SAACC,GAAyB,OAAAtC,QAAAwB,eAC5DL,QAAAe,0BACA,SAACK,GACC,OAAOA,EAAItB,KAAK,SAAAP,GAAM,OAAAA,IAAO4B,OAItBnB,QAAAqB,uBAAyBxC,QAAAwB,eAClCL,QAAAe,0BACA9B,uBAAAqC,qBACA,SAACC,EAAyBC,GACxB,IAAM5B,EAAuB,GAO7B,OANAb,SAAAO,KAAKiC,EAAe,SAAAhC,GAClB,IAAMkC,EAAiB1C,SAAAU,KAAK+B,EAAgB,SAAAE,GAAQ,OAAAA,EAAKnC,KAAOA,IAC5DkC,GACF7B,EAAOD,KAAK8B,KAGT7B","file":"auth.selectors.min.js","sourcesContent":["// NGRX\r\nimport {createSelector} from '@ngrx/store';\r\n// Lodash\r\nimport {each, find, some} from 'lodash';\r\n// Selectors\r\nimport {selectAllRoles} from './role.selectors';\r\nimport {selectAllPermissions} from './permission.selectors';\r\n// Models\r\nimport {Role} from '../_models/role.model';\r\nimport {Permission} from '../_models/permission.model';\r\n\r\nexport const selectAuthState = state => state.auth;\r\n\r\nexport const isLoggedIn = createSelector(selectAuthState, auth => auth.loggedIn);\r\n\r\nexport const isLoggedOut = createSelector(isLoggedIn, loggedIn => !loggedIn);\r\n\r\nexport const currentAuthToken = createSelector(selectAuthState, auth => auth.authToken);\r\n\r\nexport const isUserLoaded = createSelector(selectAuthState, auth => auth.isUserLoaded);\r\n\r\nexport const currentUser = createSelector(selectAuthState, auth => auth.user);\r\n\r\nexport const currentUserRoleIds = createSelector(\r\n    currentUser,\r\n    user => {\r\n      if (!user) {\r\n        return [];\r\n      }\r\n\r\n      return user.roles;\r\n    }\r\n);\r\n\r\nexport const currentUserPermissionsIds = createSelector(\r\n    currentUserRoleIds,\r\n    selectAllRoles,\r\n    (userRoleIds: string[], allRoles: Role[]) => {\r\n      return getPermissionsIdsFrom(userRoleIds, allRoles);\r\n    }\r\n);\r\n\r\nexport const checkHasUserPermission = (permissionId: string) => createSelector(\r\n    currentUserPermissionsIds,\r\n    (ids: string[]) => {\r\n      return ids.some(id => id === permissionId);\r\n    }\r\n);\r\n\r\nexport const currentUserPermissions = createSelector(\r\n    currentUserPermissionsIds,\r\n    selectAllPermissions,\r\n    (permissionIds: string[], allPermissions: Permission[]) => {\r\n      const result: Permission[] = [];\r\n      each(permissionIds, id => {\r\n        const userPermission = find(allPermissions, elem => elem.id === id);\r\n        if (userPermission) {\r\n          result.push(userPermission);\r\n        }\r\n      });\r\n      return result;\r\n    }\r\n);\r\n\r\nfunction getPermissionsIdsFrom(userRolesIds: string[] = [], allRoles: Role[] = []): string[] {\r\n  const userRoles: Role[] = [];\r\n  each(userRolesIds, (id: string) => {\r\n    const userRole = find(allRoles, (role: Role) => role.id === id);\r\n    if (userRole) {\r\n      userRoles.push(userRole);\r\n    }\r\n  });\r\n\r\n  const result: string[] = [];\r\n  each(userRoles, (role: Role) => {\r\n    each(role.permissions, id => {\r\n      if (!some(result, gid => gid === id)) {\r\n        result.push(id);\r\n      }\r\n    });\r\n  });\r\n  return result;\r\n}\r\n"]}