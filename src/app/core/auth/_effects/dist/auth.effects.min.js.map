{"version":3,"sources":["auth.effects.ts"],"names":["core_1","require","router_1","operators_1","rxjs_1","effects_1","store_1","auth_actions_1","environment_1","auth_selectors_1","AuthEffects","actions$","router","auth","store","_this","this","login$","pipe","ofType","AuthActionTypes","Login","tap","action","localStorage","setItem","environment","authTokenKey","payload","authToken","dispatch","UserRequested","logout$","Logout","removeItem","navigate","queryParams","returnUrl","document","location","reload","register$","Register","loadUser$","withLatestFrom","select","isUserLoaded","filter","_a","mergeMap","getUserByToken","_user","UserLoaded","user","init$","defer","userToken","getItem","observableResult","of","type","events","subscribe","event","NavigationEnd","url","__decorate","Effect","Injectable","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBACAC,SAAAD,QAAA,mBACAE,YAAAF,QAAA,kBACAG,OAAAH,QAAA,QACAI,UAAAJ,QAAA,iBACAK,QAAAL,QAAA,eAEAM,eAAAN,QAAA,4BAGAO,cAAAP,QAAA,wCACAQ,iBAAAR,QAAA,gCAGAS,YAAA,WAwDE,SAAAA,EAAoBC,EACVC,EACAC,EACAC,GAHV,IAAAC,EAAAC,KAAoBA,KAAAL,SAAAA,EACVK,KAAAJ,OAAAA,EACAI,KAAAH,KAAAA,EACAG,KAAAF,MAAAA,EAzDVE,KAAAC,OAASD,KAAKL,SAASO,KACrBb,UAAAc,OAAcZ,eAAAa,gBAAgBC,OAC9BlB,YAAAmB,IAAI,SAAAC,GACFC,aAAaC,QAAQjB,cAAAkB,YAAYC,aAAcJ,EAAOK,QAAQC,WAC9Dd,EAAKD,MAAMgB,SAAS,IAAIvB,eAAAwB,kBAK5Bf,KAAAgB,QAAUhB,KAAKL,SAASO,KACtBb,UAAAc,OAAeZ,eAAAa,gBAAgBa,QAC/B9B,YAAAmB,IAAI,WACFE,aAAaU,WAAW1B,cAAAkB,YAAYC,cACpCZ,EAAKH,OAAOuB,SAAS,CAAC,eAAgB,CAAEC,YAAa,CAAEC,UAAWtB,EAAKsB,aACvEC,SAASC,SAASC,YAKtBxB,KAAAyB,UAAYzB,KAAKL,SAASO,KACxBb,UAAAc,OAAiBZ,eAAAa,gBAAgBsB,UACjCvC,YAAAmB,IAAI,SAAAC,GACFC,aAAaC,QAAQjB,cAAAkB,YAAYC,aAAcJ,EAAOK,QAAQC,cAKlEb,KAAA2B,UAAY3B,KAAKL,SACdO,KACCb,UAAAc,OAAsBZ,eAAAa,gBAAgBW,eACtC5B,YAAAyC,eAAe5B,KAAKF,MAAMI,KAAKZ,QAAAuC,OAAOpC,iBAAAqC,gBACtC3C,YAAA4C,OAAO,SAACC,GAACA,EAAA,GAA2B,OAAnBA,EAAA,KACjB7C,YAAA8C,SAAS,SAACD,GAACA,EAAA,GAAQA,EAAA,GAAmB,OAAAjC,EAAKF,KAAKqC,mBAChD/C,YAAAmB,IAAI,SAAA6B,GACEA,EACFpC,EAAKD,MAAMgB,SAAS,IAAIvB,eAAA6C,WAAW,CAAEC,KAAMF,KAE3CpC,EAAKD,MAAMgB,SAAS,IAAIvB,eAAA0B,WAMhCjB,KAAAsC,MAA4BlD,OAAAmD,MAAM,WAChC,IAAMC,EAAYhC,aAAaiC,QAAQjD,cAAAkB,YAAYC,cAC/C+B,EAAmBtD,OAAAuD,GAAG,CAAEC,KAAM,cAIlC,OAHIJ,IACFE,EAAmBtD,OAAAuD,GAAG,IAAIpD,eAAAc,MAAM,CAAEQ,UAAW2B,MAExCE,IAUP1C,KAAKJ,OAAOiD,OAAOC,UAAU,SAAAC,GACvBA,aAAiB7D,SAAA8D,gBACnBjD,EAAKsB,UAAY0B,EAAME,OAI/B,OAjEEC,WAAA,CADC7D,UAAA8D,OAAO,CAAErC,UAAU,2BAUpBoC,WAAA,CADC7D,UAAA8D,OAAO,CAAErC,UAAU,4BAWpBoC,WAAA,CADC7D,UAAA8D,OAAO,CAAErC,UAAU,8BASpBoC,WAAA,CADC7D,UAAA8D,OAAO,CAAErC,UAAU,8BAiBpBoC,WAAA,CADC7D,UAAA8D,+BA5CUzD,EAAWwD,WAAA,CADvBlE,OAAAoE,cACY1D,GAAb,GAAa2D,QAAA3D,YAAAA","file":"auth.effects.min.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { filter, mergeMap, tap, withLatestFrom } from 'rxjs/operators';\r\nimport { defer, Observable, of } from 'rxjs';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Action, select, Store } from '@ngrx/store';\r\n\r\nimport { AuthActionTypes, Login, Logout, Register, UserLoaded, UserRequested } from '../_actions/auth.actions';\r\nimport { AuthService } from '../_services/index';\r\nimport { AppState } from '../../reducers';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { isUserLoaded } from '../_selectors/auth.selectors';\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n  @Effect({ dispatch: false })\r\n  login$ = this.actions$.pipe(\r\n    ofType<Login>(AuthActionTypes.Login),\r\n    tap(action => {\r\n      localStorage.setItem(environment.authTokenKey, action.payload.authToken);\r\n      this.store.dispatch(new UserRequested());\r\n    }),\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  logout$ = this.actions$.pipe(\r\n    ofType<Logout>(AuthActionTypes.Logout),\r\n    tap(() => {\r\n      localStorage.removeItem(environment.authTokenKey);\r\n      this.router.navigate(['/auth/login'], { queryParams: { returnUrl: this.returnUrl } });\r\n      document.location.reload();\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  register$ = this.actions$.pipe(\r\n    ofType<Register>(AuthActionTypes.Register),\r\n    tap(action => {\r\n      localStorage.setItem(environment.authTokenKey, action.payload.authToken);\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  loadUser$ = this.actions$\r\n    .pipe(\r\n      ofType<UserRequested>(AuthActionTypes.UserRequested),\r\n      withLatestFrom(this.store.pipe(select(isUserLoaded))),\r\n      filter(([action, _isUserLoaded]) => !_isUserLoaded),\r\n      mergeMap(([action, _isUserLoaded]) => this.auth.getUserByToken()),\r\n      tap(_user => {\r\n        if (_user) {\r\n          this.store.dispatch(new UserLoaded({ user: _user }));\r\n        } else {\r\n          this.store.dispatch(new Logout());\r\n        }\r\n      })\r\n    );\r\n\r\n  @Effect()\r\n  init$: Observable<Action> = defer(() => {\r\n    const userToken = localStorage.getItem(environment.authTokenKey);\r\n    let observableResult = of({ type: 'NO_ACTION' });\r\n    if (userToken) {\r\n      observableResult = of(new Login({ authToken: userToken }));\r\n    }\r\n    return observableResult;\r\n  });\r\n\r\n  private returnUrl: string;\r\n\r\n  constructor(private actions$: Actions,\r\n    private router: Router,\r\n    private auth: AuthService,\r\n    private store: Store<AppState>) {\r\n\r\n    this.router.events.subscribe(event => {\r\n      if (event instanceof NavigationEnd) {\r\n        this.returnUrl = event.url;\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}