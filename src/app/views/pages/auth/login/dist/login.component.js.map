{"version":3,"sources":["login.component.ts"],"names":[],"mappings":"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","file":"login.component.js","sourcesContent":["// Angular\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n// RxJS\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { finalize, takeUntil, tap } from 'rxjs/operators';\r\n// Translate\r\nimport { TranslateService } from '@ngx-translate/core';\r\n// Store\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../../core/reducers';\r\n// Auth\r\nimport { AuthNoticeService, AuthService, Login } from '../../../../core/auth';\r\n\r\n/**\r\n * ! Just example => Should be removed in development\r\n */\r\nconst DEMO_PARAMS = {\r\n\tEMAIL: 'admin@demo.com',\r\n\tPASSWORD: 'demo'\r\n};\r\n\r\n@Component({\r\n\tselector: 'kt-login',\r\n\ttemplateUrl: './login.component.html',\r\n\tencapsulation: ViewEncapsulation.None\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n\t// Public params\r\n\tloginForm: FormGroup;\r\n\tloading = false;\r\n\tisLoggedIn$: Observable<boolean>;\r\n\terrors: any = [];\r\n\r\n\tprivate unsubscribe: Subject<any>;\r\n\r\n\tprivate returnUrl: any;\r\n\r\n\t// Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\r\n\r\n\t/**\r\n\t * Component constructor\r\n\t *\r\n\t * @param router: Router\r\n\t * @param auth: AuthService\r\n\t * @param authNoticeService: AuthNoticeService\r\n\t * @param translate: TranslateService\r\n\t * @param store: Store<AppState>\r\n\t * @param fb: FormBuilder\r\n\t * @param cdr\r\n\t * @param route\r\n\t */\r\n\tconstructor(\r\n\t\tprivate router: Router,\r\n\t\tprivate auth: AuthService,\r\n\t\tprivate authNoticeService: AuthNoticeService,\r\n\t\tprivate translate: TranslateService,\r\n\t\tprivate store: Store<AppState>,\r\n\t\tprivate fb: FormBuilder,\r\n\t\tprivate cdr: ChangeDetectorRef,\r\n\t\tprivate route: ActivatedRoute\r\n\t) {\r\n\t\tthis.unsubscribe = new Subject();\r\n\t}\r\n\r\n\t/**\r\n\t * @ Lifecycle sequences => https://angular.io/guide/lifecycle-hooks\r\n\t */\r\n\r\n\t/**\r\n\t * On init\r\n\t */\r\n\tngOnInit(): void {\r\n\t\tthis.initLoginForm();\r\n\r\n\t\t// redirect back to the returnUrl before login\r\n\t\tthis.route.queryParams.subscribe(params => {\r\n\t\t\tthis.returnUrl = params.returnUrl || '/';\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * On destroy\r\n\t */\r\n\tngOnDestroy(): void {\r\n\t\tthis.authNoticeService.setNotice(null);\r\n\t\tthis.unsubscribe.next();\r\n\t\tthis.unsubscribe.complete();\r\n\t\tthis.loading = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Form initalization\r\n\t * Default params, validators\r\n\t */\r\n\tinitLoginForm() {\r\n\t\t// demo message to show\r\n\t\tif (!this.authNoticeService.onNoticeChanged$.getValue()) {\r\n\t\t\tconst initialNotice = `Use account\r\n\t\t\t<strong>${DEMO_PARAMS.EMAIL}</strong> and password\r\n\t\t\t<strong>${DEMO_PARAMS.PASSWORD}</strong> to continue.`;\r\n\t\t\tthis.authNoticeService.setNotice(initialNotice, 'info');\r\n\t\t}\r\n\r\n\t\tthis.loginForm = this.fb.group({\r\n\t\t\temail: [DEMO_PARAMS.EMAIL, Validators.compose([\r\n\t\t\t\tValidators.required,\r\n\t\t\t\tValidators.email,\r\n\t\t\t\tValidators.minLength(3),\r\n\t\t\t\tValidators.maxLength(320) // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\r\n\t\t\t])\r\n\t\t\t],\r\n\t\t\tpassword: [DEMO_PARAMS.PASSWORD, Validators.compose([\r\n\t\t\t\tValidators.required,\r\n\t\t\t\tValidators.minLength(3),\r\n\t\t\t\tValidators.maxLength(100)\r\n\t\t\t])\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Form Submit\r\n\t */\r\n\tsubmit() {\r\n\t\tconst controls = this.loginForm.controls;\r\n\t\t/** check form */\r\n\t\tif (this.loginForm.invalid) {\r\n\t\t\tObject.keys(controls).forEach(controlName =>\r\n\t\t\t\tcontrols[controlName].markAsTouched()\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.loading = true;\r\n\r\n\t\tconst authData = {\r\n\t\t\temail: controls.email.value,\r\n\t\t\tpassword: controls.password.value\r\n\t\t};\r\n\t\tthis.auth\r\n\t\t\t.login(authData.email, authData.password)\r\n\t\t\t.pipe(\r\n\t\t\t\ttap(user => {\r\n\t\t\t\t\tif (user) {\r\n\t\t\t\t\t\tthis.store.dispatch(new Login({authToken: user.accessToken}));\r\n\t\t\t\t\t\tthis.router.navigateByUrl(this.returnUrl); // Main page\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.authNoticeService.setNotice(this.translate.instant('AUTH.VALIDATION.INVALID_LOGIN'), 'danger');\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\ttakeUntil(this.unsubscribe),\r\n\t\t\t\tfinalize(() => {\r\n\t\t\t\t\tthis.loading = false;\r\n\t\t\t\t\tthis.cdr.markForCheck();\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe();\r\n\t}\r\n\r\n\t/**\r\n\t * Checking control validation\r\n\t *\r\n\t * @param controlName: string => Equals to formControlName\r\n\t * @param validationType: string => Equals to valitors name\r\n\t */\r\n\tisControlHasError(controlName: string, validationType: string): boolean {\r\n\t\tconst control = this.loginForm.controls[controlName];\r\n\t\tif (!control) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst result = control.hasError(validationType) && (control.dirty || control.touched);\r\n\t\treturn result;\r\n\t}\r\n}\r\n"]}