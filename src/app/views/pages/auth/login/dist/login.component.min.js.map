{"version":3,"sources":["login.component.ts"],"names":["core_1","require","forms_1","rxjs_1","operators_1","auth_1","DEMO_PARAMS","EMAIL","PASSWORD","LoginComponent","router","auth","authNoticeService","translate","store","fb","cdr","route","this","loading","errors","unsubscribe","Subject","prototype","ngOnInit","_this","initLoginForm","queryParams","subscribe","params","returnUrl","ngOnDestroy","setNotice","next","complete","onNoticeChanged$","getValue","initialNotice","loginForm","group","email","Validators","compose","required","minLength","maxLength","password","submit","controls","invalid","Object","keys","forEach","controlName","markAsTouched","authData","value","login","pipe","tap","user","dispatch","Login","authToken","accessToken","navigateByUrl","instant","takeUntil","finalize","markForCheck","isControlHasError","validationType","control","hasError","dirty","touched","__decorate","Component","selector","templateUrl","encapsulation","ViewEncapsulation","None","exports"],"mappings":"6YACA,IAAAA,OAAAC,QAAA,iBAEAC,QAAAD,QAAA,kBAEAE,OAAAF,QAAA,QACAG,YAAAH,QAAA,kBAOAI,OAAAJ,QAAA,yBAKMK,YAAc,CACnBC,MAAO,iBACPC,SAAU,QAQXC,eAAA,WAyBC,SAAAA,EACSC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAPAC,KAAAR,OAAAA,EACAQ,KAAAP,KAAAA,EACAO,KAAAN,kBAAAA,EACAM,KAAAL,UAAAA,EACAK,KAAAJ,MAAAA,EACAI,KAAAH,GAAAA,EACAG,KAAAF,IAAAA,EACAE,KAAAD,MAAAA,EA9BTC,KAAAC,SAAU,EAEVD,KAAAE,OAAc,GA8BbF,KAAKG,YAAc,IAAIlB,OAAAmB,QAiHzB,OAvGCb,EAAAc,UAAAC,SAAA,WAAA,IAAAC,EAAAP,KACCA,KAAKQ,gBAGLR,KAAKD,MAAMU,YAAYC,UAAU,SAAAC,GAChCJ,EAAKK,UAAYD,EAAOC,WAAa,OAOvCrB,EAAAc,UAAAQ,YAAA,WACCb,KAAKN,kBAAkBoB,UAAU,MACjCd,KAAKG,YAAYY,OACjBf,KAAKG,YAAYa,WACjBhB,KAAKC,SAAU,GAOhBV,EAAAc,UAAAG,cAAA,WAEC,IAAKR,KAAKN,kBAAkBuB,iBAAiBC,WAAY,CACxD,IAAMC,EAAgB,8BACZ/B,YAAYC,MAAK,yCACjBD,YAAYE,SAAQ,yBAC9BU,KAAKN,kBAAkBoB,UAAUK,EAAe,QAGjDnB,KAAKoB,UAAYpB,KAAKH,GAAGwB,MAAM,CAC9BC,MAAO,CAAClC,YAAYC,MAAOL,QAAAuC,WAAWC,QAAQ,CAC7CxC,QAAAuC,WAAWE,SACXzC,QAAAuC,WAAWD,MACXtC,QAAAuC,WAAWG,UAAU,GACrB1C,QAAAuC,WAAWI,UAAU,QAGtBC,SAAU,CAACxC,YAAYE,SAAUN,QAAAuC,WAAWC,QAAQ,CACnDxC,QAAAuC,WAAWE,SACXzC,QAAAuC,WAAWG,UAAU,GACrB1C,QAAAuC,WAAWI,UAAU,WASxBpC,EAAAc,UAAAwB,OAAA,WAAA,IAAAtB,EAAAP,KACO8B,EAAW9B,KAAKoB,UAAUU,SAEhC,GAAI9B,KAAKoB,UAAUW,QAClBC,OAAOC,KAAKH,GAAUI,QAAQ,SAAAC,GAC7B,OAAAL,EAASK,GAAaC,sBAFxB,CAOApC,KAAKC,SAAU,EAEf,IAAMoC,EAAW,CAChBf,MAAOQ,EAASR,MAAMgB,MACtBV,SAAUE,EAASF,SAASU,OAE7BtC,KAAKP,KACH8C,MAAMF,EAASf,MAAOe,EAAST,UAC/BY,KACAtD,YAAAuD,IAAI,SAAAC,GACCA,GACHnC,EAAKX,MAAM+C,SAAS,IAAIxD,OAAAyD,MAAM,CAACC,UAAWH,EAAKI,eAC/CvC,EAAKf,OAAOuD,cAAcxC,EAAKK,YAE/BL,EAAKb,kBAAkBoB,UAAUP,EAAKZ,UAAUqD,QAAQ,iCAAkC,YAG5F9D,YAAA+D,UAAUjD,KAAKG,aACfjB,YAAAgE,SAAS,WACR3C,EAAKN,SAAU,EACfM,EAAKT,IAAIqD,kBAGVzC,cASHnB,EAAAc,UAAA+C,kBAAA,SAAkBjB,EAAqBkB,GACtC,IAAMC,EAAUtD,KAAKoB,UAAUU,SAASK,GACxC,QAAKmB,IAIUA,EAAQC,SAASF,KAAoBC,EAAQE,OAASF,EAAQG,WAjJlElE,EAAcmE,WAAA,CAL1B5E,OAAA6E,UAAU,CACVC,SAAU,WACVC,YAAa,yBACbC,cAAehF,OAAAiF,kBAAkBC,QAErBzE,GAAb,GAAa0E,QAAA1E,eAAAA","file":"login.component.min.js","sourcesContent":["// Angular\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n// RxJS\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { finalize, takeUntil, tap } from 'rxjs/operators';\r\n// Translate\r\nimport { TranslateService } from '@ngx-translate/core';\r\n// Store\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../../core/reducers';\r\n// Auth\r\nimport { AuthNoticeService, AuthService, Login } from '../../../../core/auth';\r\n\r\n/**\r\n * ! Just example => Should be removed in development\r\n */\r\nconst DEMO_PARAMS = {\r\n\tEMAIL: 'admin@demo.com',\r\n\tPASSWORD: 'demo'\r\n};\r\n\r\n@Component({\r\n\tselector: 'kt-login',\r\n\ttemplateUrl: './login.component.html',\r\n\tencapsulation: ViewEncapsulation.None\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n\t// Public params\r\n\tloginForm: FormGroup;\r\n\tloading = false;\r\n\tisLoggedIn$: Observable<boolean>;\r\n\terrors: any = [];\r\n\r\n\tprivate unsubscribe: Subject<any>;\r\n\r\n\tprivate returnUrl: any;\r\n\r\n\t// Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\r\n\r\n\t/**\r\n\t * Component constructor\r\n\t *\r\n\t * @param router: Router\r\n\t * @param auth: AuthService\r\n\t * @param authNoticeService: AuthNoticeService\r\n\t * @param translate: TranslateService\r\n\t * @param store: Store<AppState>\r\n\t * @param fb: FormBuilder\r\n\t * @param cdr\r\n\t * @param route\r\n\t */\r\n\tconstructor(\r\n\t\tprivate router: Router,\r\n\t\tprivate auth: AuthService,\r\n\t\tprivate authNoticeService: AuthNoticeService,\r\n\t\tprivate translate: TranslateService,\r\n\t\tprivate store: Store<AppState>,\r\n\t\tprivate fb: FormBuilder,\r\n\t\tprivate cdr: ChangeDetectorRef,\r\n\t\tprivate route: ActivatedRoute\r\n\t) {\r\n\t\tthis.unsubscribe = new Subject();\r\n\t}\r\n\r\n\t/**\r\n\t * @ Lifecycle sequences => https://angular.io/guide/lifecycle-hooks\r\n\t */\r\n\r\n\t/**\r\n\t * On init\r\n\t */\r\n\tngOnInit(): void {\r\n\t\tthis.initLoginForm();\r\n\r\n\t\t// redirect back to the returnUrl before login\r\n\t\tthis.route.queryParams.subscribe(params => {\r\n\t\t\tthis.returnUrl = params.returnUrl || '/';\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * On destroy\r\n\t */\r\n\tngOnDestroy(): void {\r\n\t\tthis.authNoticeService.setNotice(null);\r\n\t\tthis.unsubscribe.next();\r\n\t\tthis.unsubscribe.complete();\r\n\t\tthis.loading = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Form initalization\r\n\t * Default params, validators\r\n\t */\r\n\tinitLoginForm() {\r\n\t\t// demo message to show\r\n\t\tif (!this.authNoticeService.onNoticeChanged$.getValue()) {\r\n\t\t\tconst initialNotice = `Use account\r\n\t\t\t<strong>${DEMO_PARAMS.EMAIL}</strong> and password\r\n\t\t\t<strong>${DEMO_PARAMS.PASSWORD}</strong> to continue.`;\r\n\t\t\tthis.authNoticeService.setNotice(initialNotice, 'info');\r\n\t\t}\r\n\r\n\t\tthis.loginForm = this.fb.group({\r\n\t\t\temail: [DEMO_PARAMS.EMAIL, Validators.compose([\r\n\t\t\t\tValidators.required,\r\n\t\t\t\tValidators.email,\r\n\t\t\t\tValidators.minLength(3),\r\n\t\t\t\tValidators.maxLength(320) // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\r\n\t\t\t])\r\n\t\t\t],\r\n\t\t\tpassword: [DEMO_PARAMS.PASSWORD, Validators.compose([\r\n\t\t\t\tValidators.required,\r\n\t\t\t\tValidators.minLength(3),\r\n\t\t\t\tValidators.maxLength(100)\r\n\t\t\t])\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Form Submit\r\n\t */\r\n\tsubmit() {\r\n\t\tconst controls = this.loginForm.controls;\r\n\t\t/** check form */\r\n\t\tif (this.loginForm.invalid) {\r\n\t\t\tObject.keys(controls).forEach(controlName =>\r\n\t\t\t\tcontrols[controlName].markAsTouched()\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.loading = true;\r\n\r\n\t\tconst authData = {\r\n\t\t\temail: controls.email.value,\r\n\t\t\tpassword: controls.password.value\r\n\t\t};\r\n\t\tthis.auth\r\n\t\t\t.login(authData.email, authData.password)\r\n\t\t\t.pipe(\r\n\t\t\t\ttap(user => {\r\n\t\t\t\t\tif (user) {\r\n\t\t\t\t\t\tthis.store.dispatch(new Login({authToken: user.accessToken}));\r\n\t\t\t\t\t\tthis.router.navigateByUrl(this.returnUrl); // Main page\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.authNoticeService.setNotice(this.translate.instant('AUTH.VALIDATION.INVALID_LOGIN'), 'danger');\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\ttakeUntil(this.unsubscribe),\r\n\t\t\t\tfinalize(() => {\r\n\t\t\t\t\tthis.loading = false;\r\n\t\t\t\t\tthis.cdr.markForCheck();\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe();\r\n\t}\r\n\r\n\t/**\r\n\t * Checking control validation\r\n\t *\r\n\t * @param controlName: string => Equals to formControlName\r\n\t * @param validationType: string => Equals to valitors name\r\n\t */\r\n\tisControlHasError(controlName: string, validationType: string): boolean {\r\n\t\tconst control = this.loginForm.controls[controlName];\r\n\t\tif (!control) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst result = control.hasError(validationType) && (control.dirty || control.touched);\r\n\t\treturn result;\r\n\t}\r\n}\r\n"]}