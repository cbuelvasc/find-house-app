{"version":3,"sources":["user-edit.component.ts"],"names":["core_1","require","forms_1","rxjs_1","store_1","crud_1","auth_1","UserEditComponent","activatedRoute","router","userFB","subheaderService","layoutUtilsService","store","layoutConfigService","this","selectedTab","rolesSubject","BehaviorSubject","addressSubject","Address","soicialNetworksSubject","SocialNetworks","hasFormErrors","subscriptions","prototype","ngOnInit","_this","loading$","pipe","select","selectUsersActionLoading","routeSubscription","params","subscribe","id","selectUserById","res","user","next","roles","address","socialNetworks","oldUser","Object","assign","initUser","User","clear","push","ngOnDestroy","forEach","sb","unsubscribe","createForm","console","log","setTitle","setBreadcrumbs","title","page","queryParams","userForm","group","username","Validators","required","fullname","email","phone","companyName","occupation","goBackWithId","navigateByUrl","relativeTo","refreshUser","isNew","url","navigate","reset","markAsPristine","markAsUntouched","updateValueAndValidity","onSumbit","withBack","controls","invalid","keys","controlName","markAsTouched","editedUser","prepareUser","updateUser","addUser","_user","value","accessToken","refreshToken","pic","password","dispatch","UserOnServerCreated","addSubscription","selectLastCreatedUserId","newId","showActionNotification","MessageType","Create","updatedUser","changes","UserUpdated","partialUser","Update","getComponentTitle","result","onAlertClose","$event","__decorate","Component","selector","templateUrl","exports"],"mappings":"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","file":"user-edit.component.min.js","sourcesContent":["// Angular\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n// RxJS\r\nimport { BehaviorSubject, Observable, of, Subscription } from 'rxjs';\r\n// NGRX\r\nimport { Store, select } from '@ngrx/store';\r\nimport { Update } from '@ngrx/entity';\r\nimport { AppState } from '../../../../../core/reducers';\r\n// Layout\r\nimport { SubheaderService, LayoutConfigService } from '../../../../../core/_base/layout';\r\nimport { LayoutUtilsService, MessageType } from '../../../../../core/_base/crud';\r\n// Services and Models\r\nimport {\r\n\tUser,\r\n\tUserUpdated,\r\n\tAddress,\r\n\tSocialNetworks,\r\n\tselectHasUsersInStore,\r\n\tselectUserById,\r\n\tUserOnServerCreated,\r\n\tselectLastCreatedUserId,\r\n\tselectUsersActionLoading\r\n} from '../../../../../core/auth';\r\n\r\n@Component({\r\n\tselector: 'kt-user-edit',\r\n\ttemplateUrl: './user-edit.component.html',\r\n})\r\nexport class UserEditComponent implements OnInit, OnDestroy {\r\n\t// Public properties\r\n\tuser: User;\r\n\tuserId$: Observable<string>;\r\n\toldUser: User;\r\n\tselectedTab = 0;\r\n\tloading$: Observable<boolean>;\r\n\trolesSubject = new BehaviorSubject<string[]>([]);\r\n\taddressSubject = new BehaviorSubject<Address>(new Address());\r\n\tsoicialNetworksSubject = new BehaviorSubject<SocialNetworks>(new SocialNetworks());\r\n\tuserForm: FormGroup;\r\n\thasFormErrors = false;\r\n\t// Private properties\r\n\tprivate subscriptions: Subscription[] = [];\r\n\r\n\tconstructor(private activatedRoute: ActivatedRoute,\r\n\t\tprivate router: Router,\r\n\t\tprivate userFB: FormBuilder,\r\n\t\tprivate subheaderService: SubheaderService,\r\n\t\tprivate layoutUtilsService: LayoutUtilsService,\r\n\t\tprivate store: Store<AppState>,\r\n\t\tprivate layoutConfigService: LayoutConfigService) { }\r\n\r\n\t/**\r\n\t * @ Lifecycle sequences => https://angular.io/guide/lifecycle-hooks\r\n\t */\r\n\r\n\t/**\r\n\t * On init\r\n\t */\r\n\tngOnInit() {\r\n\t\tthis.loading$ = this.store.pipe(select(selectUsersActionLoading));\r\n\r\n\t\tconst routeSubscription = this.activatedRoute.params.subscribe(params => {\r\n\t\t\tconst id = params.id;\r\n\t\t\tif (id) {\r\n\t\t\t\tthis.store.pipe(select(selectUserById(id))).subscribe(res => {\r\n\t\t\t\t\tif (res) {\r\n\t\t\t\t\t\tthis.user = res;\r\n\t\t\t\t\t\tthis.rolesSubject.next(this.user.roles);\r\n\t\t\t\t\t\tthis.addressSubject.next(this.user.address);\r\n\t\t\t\t\t\tthis.soicialNetworksSubject.next(this.user.socialNetworks);\r\n\t\t\t\t\t\tthis.oldUser = Object.assign({}, this.user);\r\n\t\t\t\t\t\tthis.initUser();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.user = new User();\r\n\t\t\t\tthis.user.clear();\r\n\t\t\t\tthis.rolesSubject.next(this.user.roles);\r\n\t\t\t\tthis.addressSubject.next(this.user.address);\r\n\t\t\t\tthis.soicialNetworksSubject.next(this.user.socialNetworks);\r\n\t\t\t\tthis.oldUser = Object.assign({}, this.user);\r\n\t\t\t\tthis.initUser();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.subscriptions.push(routeSubscription);\r\n\t}\r\n\r\n\tngOnDestroy() {\r\n\t\tthis.subscriptions.forEach(sb => sb.unsubscribe());\r\n\t}\r\n\r\n\t/**\r\n\t * Init user\r\n\t */\r\n\tinitUser() {\r\n\t\tthis.createForm();\r\n\t\tconsole.log(this.user.id);\r\n\t\tif (!this.user.id) {\r\n\t\t\tthis.subheaderService.setTitle('Create user');\r\n\t\t\tthis.subheaderService.setBreadcrumbs([\r\n\t\t\t\t{ title: 'User Management', page: `user-management` },\r\n\t\t\t\t{ title: 'Users', page: `user-management/users` },\r\n\t\t\t\t{ title: 'Create user', page: `user-management/users/add` }\r\n\t\t\t]);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.subheaderService.setTitle('Edit user');\r\n\t\tthis.subheaderService.setBreadcrumbs([\r\n\t\t\t{ title: 'User Management', page: `user-management` },\r\n\t\t\t{ title: 'Users', page: `user-management/users` },\r\n\t\t\t{ title: 'Edit user', page: `user-management/users/edit`, queryParams: { id: this.user.id } }\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * Create form\r\n\t */\r\n\tcreateForm() {\r\n\t\tthis.userForm = this.userFB.group({\r\n\t\t\tusername: [this.user.username, Validators.required],\r\n\t\t\tfullname: [this.user.fullname, Validators.required],\r\n\t\t\temail: [this.user.email, Validators.email],\r\n\t\t\tphone: [this.user.phone],\r\n\t\t\tcompanyName: [this.user.companyName],\r\n\t\t\toccupation: [this.user.occupation]\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Redirect to list\r\n\t *\r\n\t */\r\n\tgoBackWithId() {\r\n\t\tconst url = `/user-management/users`;\r\n\t\tthis.router.navigateByUrl(url, { relativeTo: this.activatedRoute });\r\n\t}\r\n\r\n\t/**\r\n\t * Refresh user\r\n\t *\r\n\t * @param isNew: boolean\r\n\t * @param id: number\r\n\t */\r\n\trefreshUser(isNew: boolean = false, id: string = '') {\r\n\t\tlet url = this.router.url;\r\n\t\tif (!isNew) {\r\n\t\t\tthis.router.navigate([url], { relativeTo: this.activatedRoute });\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\turl = `/user-management/users/edit/${id}`;\r\n\t\tthis.router.navigateByUrl(url, { relativeTo: this.activatedRoute });\r\n\t}\r\n\r\n\t/**\r\n\t * Reset\r\n\t */\r\n\treset() {\r\n\t\tthis.user = Object.assign({}, this.oldUser);\r\n\t\tthis.createForm();\r\n\t\tthis.hasFormErrors = false;\r\n\t\tthis.userForm.markAsPristine();\r\n\t\tthis.userForm.markAsUntouched();\r\n\t\tthis.userForm.updateValueAndValidity();\r\n\t}\r\n\r\n\t/**\r\n\t * Save data\r\n\t *\r\n\t * @param withBack: boolean\r\n\t */\r\n\tonSumbit(withBack: boolean = false) {\r\n\t\tthis.hasFormErrors = false;\r\n\t\tconst controls = this.userForm.controls;\r\n\t\t/** check form */\r\n\t\tif (this.userForm.invalid) {\r\n\t\t\tObject.keys(controls).forEach(controlName =>\r\n\t\t\t\tcontrols[controlName].markAsTouched()\r\n\t\t\t);\r\n\r\n\t\t\tthis.hasFormErrors = true;\r\n\t\t\tthis.selectedTab = 0;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst editedUser = this.prepareUser();\r\n\r\n\t\tif (editedUser.id) {\r\n\t\t\tthis.updateUser(editedUser, withBack);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.addUser(editedUser, withBack);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns prepared data for save\r\n\t */\r\n\tprepareUser(): User {\r\n\t\tconst controls = this.userForm.controls;\r\n\t\tconst _user = new User();\r\n\t\t_user.clear();\r\n\t\t_user.roles = this.rolesSubject.value;\r\n\t\t_user.address = this.addressSubject.value;\r\n\t\t_user.socialNetworks = this.soicialNetworksSubject.value;\r\n\t\t_user.accessToken = this.user.accessToken;\r\n\t\t_user.refreshToken = this.user.refreshToken;\r\n\t\t_user.pic = this.user.pic;\r\n\t\t_user.id = this.user.id;\r\n\t\t_user.username = controls.username.value;\r\n\t\t_user.email = controls.email.value;\r\n\t\t_user.fullname = controls.fullname.value;\r\n\t\t_user.occupation = controls.occupation.value;\r\n\t\t_user.phone = controls.phone.value;\r\n\t\t_user.companyName = controls.companyName.value;\r\n\t\t_user.password = this.user.password;\r\n\t\treturn _user;\r\n\t}\r\n\r\n\t/**\r\n\t * Add User\r\n\t *\r\n\t * @param _user: User\r\n\t * @param withBack: boolean\r\n\t */\r\n\taddUser(_user: User, withBack: boolean = false) {\r\n\t\tthis.store.dispatch(new UserOnServerCreated({ user: _user }));\r\n\t\tconst addSubscription = this.store.pipe(select(selectLastCreatedUserId)).subscribe(newId => {\r\n\t\t\tconst message = `New user successfully has been added.`;\r\n\t\t\tthis.layoutUtilsService.showActionNotification(message, MessageType.Create, 5000, true, true);\r\n\t\t\tif (newId) {\r\n\t\t\t\tif (withBack) {\r\n\t\t\t\t\tthis.goBackWithId();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.refreshUser(true, newId);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.subscriptions.push(addSubscription);\r\n\t}\r\n\r\n\t/**\r\n\t * Update user\r\n\t *\r\n\t * @param _user: User\r\n\t * @param withBack: boolean\r\n\t */\r\n\tupdateUser(_user: User, withBack: boolean = false) {\r\n\t\t// Update User\r\n\t\t// tslint:disable-next-line:prefer-const\r\n\r\n\t\tconst updatedUser: Update<User> = {\r\n\t\t\tid: _user.id,\r\n\t\t\tchanges: _user\r\n\t\t};\r\n\t\tthis.store.dispatch(new UserUpdated({ partialUser: updatedUser, user: _user }));\r\n\t\tconst message = `User successfully has been saved.`;\r\n\t\tthis.layoutUtilsService.showActionNotification(message, MessageType.Update, 5000, true, true);\r\n\t\tif (withBack) {\r\n\t\t\tthis.goBackWithId();\r\n\t\t} else {\r\n\t\t\tthis.refreshUser(false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns component title\r\n\t */\r\n\tgetComponentTitle() {\r\n\t\tlet result = 'Create user';\r\n\t\tif (!this.user || !this.user.id) {\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tresult = `Edit user - ${this.user.fullname}`;\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Close Alert\r\n\t *\r\n\t * @param $event: Event\r\n\t */\r\n\tonAlertClose($event) {\r\n\t\tthis.hasFormErrors = false;\r\n\t}\r\n}\r\n"]}